{"version":3,"file":"tree.model.d.ts","sources":["tree.model.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nexport declare class TreeModel implements ITreeModel, OnDestroy {\r\n    static focusedTree: any;\r\n    options: TreeOptions;\r\n    nodes: any[];\r\n    eventNames: string[];\r\n    virtualScroll: TreeVirtualScroll;\r\n    roots: TreeNode[];\r\n    expandedNodeIds: IDTypeDictionary;\r\n    selectedLeafNodeIds: IDTypeDictionary;\r\n    activeNodeIds: IDTypeDictionary;\r\n    hiddenNodeIds: IDTypeDictionary;\r\n    focusedNodeId: IDType;\r\n    virtualRoot: TreeNode;\r\n    private firstUpdate;\r\n    private events;\r\n    private subscriptions;\r\n    fireEvent(event: any): void;\r\n    subscribe(eventName: any, fn: any): void;\r\n    getFocusedNode(): TreeNode;\r\n    getActiveNode(): TreeNode;\r\n    getActiveNodes(): TreeNode[];\r\n    getVisibleRoots(): TreeNode[];\r\n    getFirstRoot(skipHidden?: boolean): any;\r\n    getLastRoot(skipHidden?: boolean): any;\r\n    get isFocused(): boolean;\r\n    isNodeFocused(node: any): boolean;\r\n    isEmptyTree(): boolean;\r\n    get focusedNode(): any;\r\n    get expandedNodes(): any;\r\n    get activeNodes(): any;\r\n    get hiddenNodes(): any;\r\n    get selectedLeafNodes(): any;\r\n    getNodeByPath(path: any[], startNode?: any): TreeNode;\r\n    getNodeById(id: any): any;\r\n    getNodeBy(predicate: any, startNode?: any): any;\r\n    isExpanded(node: any): boolean;\r\n    isHidden(node: any): boolean;\r\n    isActive(node: any): boolean;\r\n    isSelected(node: any): boolean;\r\n    ngOnDestroy(): void;\r\n    dispose(): void;\r\n    unsubscribeAll(): void;\r\n    setData({ nodes, options, events }: {\r\n        nodes: any;\r\n        options: any;\r\n        events: any;\r\n    }): void;\r\n    update(): void;\r\n    setFocusedNode(node: any): void;\r\n    setFocus(value: any): void;\r\n    doForAll(fn: any): void;\r\n    focusNextNode(): void;\r\n    focusPreviousNode(): void;\r\n    focusDrillDown(): void;\r\n    focusDrillUp(): void;\r\n    setActiveNode(node: any, value: any, multi?: boolean): void;\r\n    setSelectedNode(node: any, value: any): void;\r\n    setExpandedNode(node: any, value: any): void;\r\n    expandAll(): void;\r\n    collapseAll(): void;\r\n    setIsHidden(node: any, value: any): void;\r\n    setHiddenNodeIds(nodeIds: any): void;\r\n    performKeyAction(node: any, $event: any): boolean;\r\n    filterNodes(filter: any, autoShow?: boolean): void;\r\n    clearFilter(): void;\r\n    moveNode(node: any, to: any): void;\r\n    copyNode(node: any, to: any): void;\r\n    getState(): {\r\n        expandedNodeIds: IDTypeDictionary;\r\n        selectedLeafNodeIds: IDTypeDictionary;\r\n        activeNodeIds: IDTypeDictionary;\r\n        hiddenNodeIds: IDTypeDictionary;\r\n        focusedNodeId: IDType;\r\n    };\r\n    setState(state: any): void;\r\n    subscribeToState(fn: any): void;\r\n    canMoveNode(node: any, to: any, fromIndex?: any): boolean;\r\n    calculateExpandedNodes(): void;\r\n    private _filterNode;\r\n    private _calculateExpandedNodes;\r\n    private _setActiveNodeSingle;\r\n    private _setActiveNodeMulti;\r\n}\r\n"]}