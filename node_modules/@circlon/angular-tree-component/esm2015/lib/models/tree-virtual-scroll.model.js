import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tree.model';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree-virtual-scroll.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { observable, computed, action, autorun, reaction } from 'mobx';
import { TreeModel } from './tree.model';
import { TREE_EVENTS } from '../constants/events';
/** @type {?} */
const Y_OFFSET = 500;
// Extra pixels outside the viewport, in each direction, to render nodes in
/** @type {?} */
const Y_EPSILON = 150;
// Minimum pixel change required to recalculate the rendered nodes
export class TreeVirtualScroll {
    /**
     * @param {?} treeModel
     */
    constructor(treeModel) {
        this.treeModel = treeModel;
        this.yBlocks = 0;
        this.x = 0;
        this.viewportHeight = null;
        this.viewport = null;
        treeModel.virtualScroll = this;
        this._dispose = [autorun((/**
             * @return {?}
             */
            () => this.fixScroll()))];
    }
    /**
     * @return {?}
     */
    get y() {
        return this.yBlocks * Y_EPSILON;
    }
    /**
     * @return {?}
     */
    get totalHeight() {
        return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fireEvent(event) {
        this.treeModel.fireEvent(event);
    }
    /**
     * @return {?}
     */
    init() {
        /** @type {?} */
        const fn = this.recalcPositions.bind(this);
        fn();
        this._dispose = [
            ...this._dispose,
            reaction((/**
             * @return {?}
             */
            () => this.treeModel.roots), fn),
            reaction((/**
             * @return {?}
             */
            () => this.treeModel.expandedNodeIds), fn),
            reaction((/**
             * @return {?}
             */
            () => this.treeModel.hiddenNodeIds), fn)
        ];
        this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);
    }
    /**
     * @return {?}
     */
    isEnabled() {
        return this.treeModel.options.useVirtualScroll;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setYBlocks(value) {
        this.yBlocks = value;
    }
    /**
     * @return {?}
     */
    recalcPositions() {
        this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} startPos
     * @return {?}
     */
    _getPositionAfter(nodes, startPos) {
        /** @type {?} */
        let position = startPos;
        nodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            node.position = position;
            position = this._getPositionAfterNode(node, position);
        }));
        return position;
    }
    /**
     * @private
     * @param {?} node
     * @param {?} startPos
     * @return {?}
     */
    _getPositionAfterNode(node, startPos) {
        /** @type {?} */
        let position = node.getSelfHeight() + startPos;
        if (node.children && node.isExpanded) { // TBD: consider loading component as well
            position = this._getPositionAfter(node.visibleChildren, position);
        }
        node.height = position - startPos;
        return position;
    }
    /**
     * @return {?}
     */
    clear() {
        this._dispose.forEach((/**
         * @param {?} d
         * @return {?}
         */
        (d) => d()));
    }
    /**
     * @param {?} viewport
     * @return {?}
     */
    setViewport(viewport) {
        Object.assign(this, {
            viewport,
            x: viewport.scrollLeft,
            yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),
            viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0
        });
    }
    /**
     * @param {?} node
     * @param {?} force
     * @param {?=} scrollToMiddle
     * @return {?}
     */
    scrollIntoView(node, force, scrollToMiddle = true) {
        if (node.options.scrollContainer) {
            /** @type {?} */
            const scrollContainer = node.options.scrollContainer;
            /** @type {?} */
            const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;
            /** @type {?} */
            const scrollContainerTop = scrollContainer.getBoundingClientRect().top;
            /** @type {?} */
            const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;
            if (force || // force scroll to node
                nodeTop < scrollContainer.scrollTop || // node is above scroll container
                nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container
                scrollContainer.scrollTop = scrollToMiddle ?
                    nodeTop - scrollContainerHeight / 2 : // scroll to middle
                    nodeTop; // scroll to start
            }
        }
        else {
            if (force || // force scroll to node
                node.position < this.y || // node is above viewport
                node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport
                if (this.viewport) {
                    this.viewport.scrollTop = scrollToMiddle ?
                        node.position - this.viewportHeight / 2 : // scroll to middle
                        node.position; // scroll to start
                    this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));
                }
            }
        }
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    getViewportNodes(nodes) {
        if (!nodes)
            return [];
        /** @type {?} */
        const visibleNodes = nodes.filter((/**
         * @param {?} node
         * @return {?}
         */
        (node) => !node.isHidden));
        if (!this.isEnabled())
            return visibleNodes;
        if (!this.viewportHeight || !visibleNodes.length)
            return [];
        // When loading children async this method is called before their height and position is calculated.
        // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),
        // which means that it loops through every visibleNodes item and push them into viewportNodes array.
        // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place
        /** @type {?} */
        const lastVisibleNode = visibleNodes.slice(-1)[0];
        if (!lastVisibleNode.height && lastVisibleNode.position === 0)
            return [];
        // Search for first node in the viewport using binary search
        // Look for first node that starts after the beginning of the viewport (with buffer)
        // Or that ends after the beginning of the viewport
        /** @type {?} */
        const firstIndex = binarySearch(visibleNodes, (/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return (node.position + Y_OFFSET > this.y) ||
                (node.position + node.height > this.y);
        }));
        // Search for last node in the viewport using binary search
        // Look for first node that starts after the end of the viewport (with buffer)
        /** @type {?} */
        const lastIndex = binarySearch(visibleNodes, (/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return node.position - Y_OFFSET > this.y + this.viewportHeight;
        }), firstIndex);
        /** @type {?} */
        const viewportNodes = [];
        for (let i = firstIndex; i <= lastIndex; i++) {
            viewportNodes.push(visibleNodes[i]);
        }
        return viewportNodes;
    }
    /**
     * @return {?}
     */
    fixScroll() {
        /** @type {?} */
        const maxY = Math.max(0, this.totalHeight - this.viewportHeight);
        if (this.y < 0)
            this._setYBlocks(0);
        if (this.y > maxY)
            this._setYBlocks(maxY / Y_EPSILON);
    }
}
TreeVirtualScroll.ɵfac = function TreeVirtualScroll_Factory(t) { return new (t || TreeVirtualScroll)(ɵngcc0.ɵɵinject(ɵngcc1.TreeModel)); };
TreeVirtualScroll.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeVirtualScroll, factory: TreeVirtualScroll.ɵfac });
/** @nocollapse */
TreeVirtualScroll.ctorParameters = () => [
    { type: TreeModel }
];
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeVirtualScroll.prototype, "yBlocks", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeVirtualScroll.prototype, "x", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeVirtualScroll.prototype, "viewportHeight", void 0);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeVirtualScroll.prototype, "y", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeVirtualScroll.prototype, "totalHeight", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeVirtualScroll.prototype, "_setYBlocks", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeVirtualScroll.prototype, "recalcPositions", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeVirtualScroll.prototype, "setViewport", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", void 0)
], TreeVirtualScroll.prototype, "scrollIntoView", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeVirtualScroll, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TreeModel }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeVirtualScroll.prototype._dispose;
    /** @type {?} */
    TreeVirtualScroll.prototype.yBlocks;
    /** @type {?} */
    TreeVirtualScroll.prototype.x;
    /** @type {?} */
    TreeVirtualScroll.prototype.viewportHeight;
    /** @type {?} */
    TreeVirtualScroll.prototype.viewport;
    /**
     * @type {?}
     * @private
     */
    TreeVirtualScroll.prototype.treeModel;
}
/**
 * @param {?} nodes
 * @param {?} condition
 * @param {?=} firstIndex
 * @return {?}
 */
function binarySearch(nodes, condition, firstIndex = 0) {
    /** @type {?} */
    let index = firstIndex;
    /** @type {?} */
    let toIndex = nodes.length - 1;
    while (index !== toIndex) {
        /** @type {?} */
        let midIndex = Math.floor((index + toIndex) / 2);
        if (condition(nodes[midIndex])) {
            toIndex = midIndex;
        }
        else {
            if (index === midIndex)
                index = toIndex;
            else
                index = midIndex;
        }
    }
    return index;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,