/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree-dragged-element.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class TreeDraggedElement {
    constructor() {
        this._draggedElement = null;
    }
    /**
     * @param {?} draggedElement
     * @return {?}
     */
    set(draggedElement) {
        this._draggedElement = draggedElement;
    }
    /**
     * @return {?}
     */
    get() {
        return this._draggedElement;
    }
    /**
     * @return {?}
     */
    isDragging() {
        return !!this.get();
    }
}
TreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) { return new (t || TreeDraggedElement)(); };
/** @nocollapse */ TreeDraggedElement.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeDraggedElement_Factory() { return new TreeDraggedElement(); }, token: TreeDraggedElement, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeDraggedElement, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    TreeDraggedElement.prototype._draggedElement;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItdHJlZS1jb21wb25lbnQvc3JjL2xpYi9tb2RlbHMvdHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDOztBQUlBLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFKQTtBQUNFLFFBR0Esb0JBQWUsR0FBUSxJQUFJLENBQUM7QUFDOUIsS0FZQztBQUNEO0FBQVE7QUFBaUM7QUFBbUI7QUFBUSxJQVpsRSxHQUFHLENBQUMsY0FBbUI7QUFDekIsUUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztBQUMxQyxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0k7QUFBUSxJQURqQixHQUFHO0FBQUssUUFDTixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNFO0FBQVEsSUFEZixVQUFVO0FBQ1osUUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7OENBakJDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxRQUVmO0tBREosTEFDSzs7Ozs7O2dEQVdRO0FBQUM7QUFDSjtBQUdWLElBZEMsNkNBQTRCOztBQU5BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWFBLEFBWEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBaEJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJlZURyYWdnZWRFbGVtZW50IHtcclxuICBfZHJhZ2dlZEVsZW1lbnQ6IGFueSA9IG51bGw7XHJcblxyXG4gIHNldChkcmFnZ2VkRWxlbWVudDogYW55KSB7XHJcbiAgICB0aGlzLl9kcmFnZ2VkRWxlbWVudCA9IGRyYWdnZWRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgZ2V0KCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZHJhZ2dlZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBpc0RyYWdnaW5nKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5nZXQoKTtcclxuICB9XHJcbn1cclxuIl19