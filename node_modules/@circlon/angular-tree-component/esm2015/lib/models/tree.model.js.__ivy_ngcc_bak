var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { observable, computed, action, autorun } from 'mobx';
import { TreeNode } from './tree-node.model';
import { TreeOptions } from './tree-options.model';
import { TREE_EVENTS } from '../constants/events';
import { first, last, compact, find, isString, isFunction } from 'lodash-es';
export class TreeModel {
    constructor() {
        this.options = new TreeOptions();
        this.eventNames = Object.keys(TREE_EVENTS);
        this.expandedNodeIds = {};
        this.selectedLeafNodeIds = {};
        this.activeNodeIds = {};
        this.hiddenNodeIds = {};
        this.focusedNodeId = null;
        this.firstUpdate = true;
        this.subscriptions = [];
    }
    // events
    /**
     * @param {?} event
     * @return {?}
     */
    fireEvent(event) {
        event.treeModel = this;
        this.events[event.eventName].emit(event);
        this.events.event.emit(event);
    }
    /**
     * @param {?} eventName
     * @param {?} fn
     * @return {?}
     */
    subscribe(eventName, fn) {
        /** @type {?} */
        const subscription = this.events[eventName].subscribe(fn);
        this.subscriptions.push(subscription);
    }
    // getters
    /**
     * @return {?}
     */
    getFocusedNode() {
        return this.focusedNode;
    }
    /**
     * @return {?}
     */
    getActiveNode() {
        return this.activeNodes[0];
    }
    /**
     * @return {?}
     */
    getActiveNodes() {
        return this.activeNodes;
    }
    /**
     * @return {?}
     */
    getVisibleRoots() {
        return this.virtualRoot.visibleChildren;
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    getFirstRoot(skipHidden = false) {
        return first(skipHidden ? this.getVisibleRoots() : this.roots);
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    getLastRoot(skipHidden = false) {
        return last(skipHidden ? this.getVisibleRoots() : this.roots);
    }
    /**
     * @return {?}
     */
    get isFocused() {
        return TreeModel.focusedTree === this;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isNodeFocused(node) {
        return this.focusedNode === node;
    }
    /**
     * @return {?}
     */
    isEmptyTree() {
        return this.roots && this.roots.length === 0;
    }
    /**
     * @return {?}
     */
    get focusedNode() {
        return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;
    }
    /**
     * @return {?}
     */
    get expandedNodes() {
        /** @type {?} */
        const nodes = Object.keys(this.expandedNodeIds)
            .filter((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.expandedNodeIds[id]))
            .map((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.getNodeById(id)));
        return compact(nodes);
    }
    /**
     * @return {?}
     */
    get activeNodes() {
        /** @type {?} */
        const nodes = Object.keys(this.activeNodeIds)
            .filter((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.activeNodeIds[id]))
            .map((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.getNodeById(id)));
        return compact(nodes);
    }
    /**
     * @return {?}
     */
    get hiddenNodes() {
        /** @type {?} */
        const nodes = Object.keys(this.hiddenNodeIds)
            .filter((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.hiddenNodeIds[id]))
            .map((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.getNodeById(id)));
        return compact(nodes);
    }
    /**
     * @return {?}
     */
    get selectedLeafNodes() {
        /** @type {?} */
        const nodes = Object.keys(this.selectedLeafNodeIds)
            .filter((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.selectedLeafNodeIds[id]))
            .map((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.getNodeById(id)));
        return compact(nodes);
    }
    // locating nodes
    /**
     * @param {?} path
     * @param {?=} startNode
     * @return {?}
     */
    getNodeByPath(path, startNode = null) {
        if (!path)
            return null;
        startNode = startNode || this.virtualRoot;
        if (path.length === 0)
            return startNode;
        if (!startNode.children)
            return null;
        /** @type {?} */
        const childId = path.shift();
        /** @type {?} */
        const childNode = find(startNode.children, { id: childId });
        if (!childNode)
            return null;
        return this.getNodeByPath(path, childNode);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getNodeById(id) {
        /** @type {?} */
        const idStr = id.toString();
        return this.getNodeBy((/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.id.toString() === idStr));
    }
    /**
     * @param {?} predicate
     * @param {?=} startNode
     * @return {?}
     */
    getNodeBy(predicate, startNode = null) {
        startNode = startNode || this.virtualRoot;
        if (!startNode.children)
            return null;
        /** @type {?} */
        const found = find(startNode.children, predicate);
        if (found) { // found in children
            return found;
        }
        else { // look in children's children
            for (let child of startNode.children) {
                /** @type {?} */
                const foundInChildren = this.getNodeBy(predicate, child);
                if (foundInChildren)
                    return foundInChildren;
            }
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isExpanded(node) {
        return this.expandedNodeIds[node.id];
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isHidden(node) {
        return this.hiddenNodeIds[node.id];
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isActive(node) {
        return this.activeNodeIds[node.id];
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isSelected(node) {
        return this.selectedLeafNodeIds[node.id];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose();
        this.unsubscribeAll();
    }
    /**
     * @return {?}
     */
    dispose() {
        // Dispose reactions of the replaced nodes
        if (this.virtualRoot) {
            this.virtualRoot.dispose();
        }
    }
    /**
     * @return {?}
     */
    unsubscribeAll() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        subscription => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    // actions
    /**
     * @param {?} __0
     * @return {?}
     */
    setData({ nodes, options = null, events = null }) {
        if (options) {
            this.options = new TreeOptions(options);
        }
        if (events) {
            this.events = events;
        }
        if (nodes) {
            this.nodes = nodes;
        }
        this.update();
    }
    /**
     * @return {?}
     */
    update() {
        // Rebuild tree:
        /** @type {?} */
        let virtualRootConfig = {
            id: this.options.rootId,
            virtual: true,
            [this.options.childrenField]: this.nodes
        };
        this.dispose();
        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);
        this.roots = this.virtualRoot.children;
        // Fire event:
        if (this.firstUpdate) {
            if (this.roots) {
                this.firstUpdate = false;
                this._calculateExpandedNodes();
            }
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.updateData });
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setFocusedNode(node) {
        this.focusedNodeId = node ? node.id : null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFocus(value) {
        TreeModel.focusedTree = value ? this : null;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    doForAll(fn) {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        (root) => root.doForAll(fn)));
    }
    /**
     * @return {?}
     */
    focusNextNode() {
        /** @type {?} */
        let previousNode = this.getFocusedNode();
        /** @type {?} */
        let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);
        if (nextNode)
            nextNode.focus();
    }
    /**
     * @return {?}
     */
    focusPreviousNode() {
        /** @type {?} */
        let previousNode = this.getFocusedNode();
        /** @type {?} */
        let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);
        if (nextNode)
            nextNode.focus();
    }
    /**
     * @return {?}
     */
    focusDrillDown() {
        /** @type {?} */
        let previousNode = this.getFocusedNode();
        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {
            previousNode.toggleExpanded();
        }
        else {
            /** @type {?} */
            let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);
            if (nextNode)
                nextNode.focus();
        }
    }
    /**
     * @return {?}
     */
    focusDrillUp() {
        /** @type {?} */
        let previousNode = this.getFocusedNode();
        if (!previousNode)
            return;
        if (previousNode.isExpanded) {
            previousNode.toggleExpanded();
        }
        else {
            /** @type {?} */
            let nextNode = previousNode.realParent;
            if (nextNode)
                nextNode.focus();
        }
    }
    /**
     * @param {?} node
     * @param {?} value
     * @param {?=} multi
     * @return {?}
     */
    setActiveNode(node, value, multi = false) {
        if (multi) {
            this._setActiveNodeMulti(node, value);
        }
        else {
            this._setActiveNodeSingle(node, value);
        }
        if (value) {
            node.focus(this.options.scrollOnActivate);
            this.fireEvent({ eventName: TREE_EVENTS.activate, node });
            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });
            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11
        }
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setSelectedNode(node, value) {
        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, { [node.id]: value });
        if (value) {
            node.focus();
            this.fireEvent({ eventName: TREE_EVENTS.select, node });
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.deselect, node });
        }
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setExpandedNode(node, value) {
        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [node.id]: value });
        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        (root) => root.expandAll()));
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        (root) => root.collapseAll()));
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setIsHidden(node, value) {
        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, { [node.id]: value });
    }
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    setHiddenNodeIds(nodeIds) {
        this.hiddenNodeIds = nodeIds.reduce((/**
         * @param {?} hiddenNodeIds
         * @param {?} id
         * @return {?}
         */
        (hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {
            [id]: true
        })), {});
    }
    /**
     * @param {?} node
     * @param {?} $event
     * @return {?}
     */
    performKeyAction(node, $event) {
        /** @type {?} */
        const keyAction = this.options.actionMapping.keys[$event.keyCode];
        if (keyAction) {
            $event.preventDefault();
            keyAction(this, node, $event);
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} filter
     * @param {?=} autoShow
     * @return {?}
     */
    filterNodes(filter, autoShow = true) {
        /** @type {?} */
        let filterFn;
        if (!filter) {
            return this.clearFilter();
        }
        // support function and string filter
        if (isString(filter)) {
            filterFn = (/**
             * @param {?} node
             * @return {?}
             */
            (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1);
        }
        else if (isFunction(filter)) {
            filterFn = filter;
        }
        else {
            console.error('Don\'t know what to do with filter', filter);
            console.error('Should be either a string or function');
            return;
        }
        /** @type {?} */
        const ids = {};
        this.roots.forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => this._filterNode(ids, node, filterFn, autoShow)));
        this.hiddenNodeIds = ids;
        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.hiddenNodeIds = {};
        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
    }
    /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    moveNode(node, to) {
        /** @type {?} */
        const fromIndex = node.getIndexInParent();
        /** @type {?} */
        const fromParent = node.parent;
        if (!this.canMoveNode(node, to, fromIndex))
            return;
        /** @type {?} */
        const fromChildren = fromParent.getField('children');
        // If node doesn't have children - create children array
        if (!to.parent.getField('children')) {
            to.parent.setField('children', []);
        }
        /** @type {?} */
        const toChildren = to.parent.getField('children');
        /** @type {?} */
        const originalNode = fromChildren.splice(fromIndex, 1)[0];
        // Compensate for index if already removed from parent:
        /** @type {?} */
        let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;
        toChildren.splice(toIndex, 0, originalNode);
        fromParent.treeModel.update();
        if (to.parent.treeModel !== fromParent.treeModel) {
            to.parent.treeModel.update();
        }
        this.fireEvent({
            eventName: TREE_EVENTS.moveNode,
            node: originalNode,
            to: { parent: to.parent.data, index: toIndex },
            from: { parent: fromParent.data, index: fromIndex }
        });
    }
    /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    copyNode(node, to) {
        /** @type {?} */
        const fromIndex = node.getIndexInParent();
        if (!this.canMoveNode(node, to, fromIndex))
            return;
        // If node doesn't have children - create children array
        if (!to.parent.getField('children')) {
            to.parent.setField('children', []);
        }
        /** @type {?} */
        const toChildren = to.parent.getField('children');
        /** @type {?} */
        const nodeCopy = this.options.getNodeClone(node);
        toChildren.splice(to.index, 0, nodeCopy);
        node.treeModel.update();
        if (to.parent.treeModel !== node.treeModel) {
            to.parent.treeModel.update();
        }
        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });
    }
    /**
     * @return {?}
     */
    getState() {
        return {
            expandedNodeIds: this.expandedNodeIds,
            selectedLeafNodeIds: this.selectedLeafNodeIds,
            activeNodeIds: this.activeNodeIds,
            hiddenNodeIds: this.hiddenNodeIds,
            focusedNodeId: this.focusedNodeId
        };
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setState(state) {
        if (!state)
            return;
        Object.assign(this, {
            expandedNodeIds: state.expandedNodeIds || {},
            selectedLeafNodeIds: state.selectedLeafNodeIds || {},
            activeNodeIds: state.activeNodeIds || {},
            hiddenNodeIds: state.hiddenNodeIds || {},
            focusedNodeId: state.focusedNodeId
        });
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    subscribeToState(fn) {
        autorun((/**
         * @return {?}
         */
        () => fn(this.getState())));
    }
    /**
     * @param {?} node
     * @param {?} to
     * @param {?=} fromIndex
     * @return {?}
     */
    canMoveNode(node, to, fromIndex = undefined) {
        /** @type {?} */
        const fromNodeIndex = fromIndex || node.getIndexInParent();
        // same node:
        if (node.parent === to.parent && fromIndex === to.index) {
            return false;
        }
        return !to.parent.isDescendantOf(node);
    }
    /**
     * @return {?}
     */
    calculateExpandedNodes() {
        this._calculateExpandedNodes();
    }
    // private methods
    /**
     * @private
     * @param {?} ids
     * @param {?} node
     * @param {?} filterFn
     * @param {?} autoShow
     * @return {?}
     */
    _filterNode(ids, node, filterFn, autoShow) {
        // if node passes function then it's visible
        /** @type {?} */
        let isVisible = filterFn(node);
        if (node.children) {
            // if one of node's children passes filter then this node is also visible
            node.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            (child) => {
                if (this._filterNode(ids, child, filterFn, autoShow)) {
                    isVisible = true;
                }
            }));
        }
        // mark node as hidden
        if (!isVisible) {
            ids[node.id] = true;
        }
        // auto expand parents to make sure the filtered nodes are visible
        if (autoShow && isVisible) {
            node.ensureVisible();
        }
        return isVisible;
    }
    /**
     * @private
     * @param {?=} startNode
     * @return {?}
     */
    _calculateExpandedNodes(startNode = null) {
        startNode = startNode || this.virtualRoot;
        if (startNode.data[this.options.isExpandedField]) {
            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [startNode.id]: true });
        }
        if (startNode.children) {
            startNode.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            (child) => this._calculateExpandedNodes(child)));
        }
    }
    /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    _setActiveNodeSingle(node, value) {
        // Deactivate all other nodes:
        this.activeNodes
            .filter((/**
         * @param {?} activeNode
         * @return {?}
         */
        (activeNode) => activeNode !== node))
            .forEach((/**
         * @param {?} activeNode
         * @return {?}
         */
        (activeNode) => {
            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });
            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11
        }));
        if (value) {
            this.activeNodeIds = { [node.id]: true };
        }
        else {
            this.activeNodeIds = {};
        }
    }
    /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    _setActiveNodeMulti(node, value) {
        this.activeNodeIds = Object.assign({}, this.activeNodeIds, { [node.id]: value });
    }
}
TreeModel.focusedTree = null;
TreeModel.decorators = [
    { type: Injectable }
];
__decorate([
    observable,
    __metadata("design:type", Array)
], TreeModel.prototype, "roots", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeModel.prototype, "expandedNodeIds", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeModel.prototype, "selectedLeafNodeIds", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeModel.prototype, "activeNodeIds", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeModel.prototype, "hiddenNodeIds", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeModel.prototype, "focusedNodeId", void 0);
__decorate([
    observable,
    __metadata("design:type", TreeNode)
], TreeModel.prototype, "virtualRoot", void 0);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeModel.prototype, "focusedNode", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeModel.prototype, "expandedNodes", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeModel.prototype, "activeNodes", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeModel.prototype, "hiddenNodes", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeModel.prototype, "selectedLeafNodes", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setData", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "update", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setFocusedNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setFocus", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "doForAll", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "focusNextNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "focusPreviousNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "focusDrillDown", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "focusDrillUp", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setActiveNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setSelectedNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setExpandedNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "expandAll", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "collapseAll", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setIsHidden", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setHiddenNodeIds", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "filterNodes", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "clearFilter", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "moveNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "copyNode", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeModel.prototype, "setState", null);
if (false) {
    /** @type {?} */
    TreeModel.focusedTree;
    /** @type {?} */
    TreeModel.prototype.options;
    /** @type {?} */
    TreeModel.prototype.nodes;
    /** @type {?} */
    TreeModel.prototype.eventNames;
    /** @type {?} */
    TreeModel.prototype.virtualScroll;
    /** @type {?} */
    TreeModel.prototype.roots;
    /** @type {?} */
    TreeModel.prototype.expandedNodeIds;
    /** @type {?} */
    TreeModel.prototype.selectedLeafNodeIds;
    /** @type {?} */
    TreeModel.prototype.activeNodeIds;
    /** @type {?} */
    TreeModel.prototype.hiddenNodeIds;
    /** @type {?} */
    TreeModel.prototype.focusedNodeId;
    /** @type {?} */
    TreeModel.prototype.virtualRoot;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.firstUpdate;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.events;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.subscriptions;
}
//# sourceMappingURL=data:application/json;base64,