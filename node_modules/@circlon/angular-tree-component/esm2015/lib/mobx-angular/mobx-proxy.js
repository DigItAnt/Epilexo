/**
 * @fileoverview added by tsickle
 * Generated from: lib/mobx-angular/mobx-proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { action as mobxAction } from 'mobx';
import { computed as mobxComputed } from 'mobx';
import { observable as mobxObservable } from 'mobx';
// Re-export mobx operators to be able to use inside components with AOT:
/**
 * @param {...?} args
 * @return {?}
 */
export function actionInternal(...args) {
    return ((/** @type {?} */ (mobxAction)))(...args);
}
/** @type {?} */
export const action = (/** @type {?} */ (Object.assign(actionInternal, mobxAction)));
/**
 * @param {...?} args
 * @return {?}
 */
function computedInternal(...args) {
    return ((/** @type {?} */ (mobxComputed)))(...args);
}
/** @type {?} */
export const computed = (/** @type {?} */ (Object.assign(computedInternal, mobxComputed)));
/**
 * @param {...?} args
 * @return {?}
 */
function observableInternal(...args) {
    return ((/** @type {?} */ (mobxObservable)))(...args);
}
/** @type {?} */
export const observable = (/** @type {?} */ (Object.assign(observableInternal, mobxObservable)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ieC1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItdHJlZS1jb21wb25lbnQvc3JjL2xpYi9tb2J4LWFuZ3VsYXIvbW9ieC1wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLElBQUksY0FBYyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFHcEQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFHLElBQUk7SUFDcEMsT0FBTyxDQUFDLG1CQUFBLFVBQVUsRUFBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDOztBQUNELE1BQU0sT0FBTyxNQUFNLEdBQXNCLG1CQUFBLE1BQU0sQ0FBQyxNQUFNLENBQ3BELGNBQWMsRUFDZCxVQUFVLENBQ1gsRUFBTzs7Ozs7QUFFUixTQUFTLGdCQUFnQixDQUFDLEdBQUcsSUFBSTtJQUMvQixPQUFPLENBQUMsbUJBQUEsWUFBWSxFQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3hDLENBQUM7O0FBQ0QsTUFBTSxPQUFPLFFBQVEsR0FBd0IsbUJBQUEsTUFBTSxDQUFDLE1BQU0sQ0FDeEQsZ0JBQWdCLEVBQ2hCLFlBQVksQ0FDYixFQUFPOzs7OztBQUVSLFNBQVMsa0JBQWtCLENBQUMsR0FBRyxJQUFJO0lBQ2pDLE9BQU8sQ0FBQyxtQkFBQSxjQUFjLEVBQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQzs7QUFFRCxNQUFNLE9BQU8sVUFBVSxHQUEwQixtQkFBQSxNQUFNLENBQUMsTUFBTSxDQUM1RCxrQkFBa0IsRUFDbEIsY0FBYyxDQUNmLEVBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhY3Rpb24gYXMgbW9ieEFjdGlvbiB9IGZyb20gJ21vYngnO1xyXG5pbXBvcnQgeyBjb21wdXRlZCBhcyBtb2J4Q29tcHV0ZWQgfSBmcm9tICdtb2J4JztcclxuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBtb2J4T2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xyXG5cclxuLy8gUmUtZXhwb3J0IG1vYnggb3BlcmF0b3JzIHRvIGJlIGFibGUgdG8gdXNlIGluc2lkZSBjb21wb25lbnRzIHdpdGggQU9UOlxyXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uSW50ZXJuYWwoLi4uYXJncykge1xyXG4gIHJldHVybiAobW9ieEFjdGlvbiBhcyBhbnkpKC4uLmFyZ3MpO1xyXG59XHJcbmV4cG9ydCBjb25zdCBhY3Rpb246IHR5cGVvZiBtb2J4QWN0aW9uID0gT2JqZWN0LmFzc2lnbihcclxuICBhY3Rpb25JbnRlcm5hbCxcclxuICBtb2J4QWN0aW9uXHJcbikgYXMgYW55O1xyXG5cclxuZnVuY3Rpb24gY29tcHV0ZWRJbnRlcm5hbCguLi5hcmdzKSB7XHJcbiAgcmV0dXJuIChtb2J4Q29tcHV0ZWQgYXMgYW55KSguLi5hcmdzKTtcclxufVxyXG5leHBvcnQgY29uc3QgY29tcHV0ZWQ6IHR5cGVvZiBtb2J4Q29tcHV0ZWQgPSBPYmplY3QuYXNzaWduKFxyXG4gIGNvbXB1dGVkSW50ZXJuYWwsXHJcbiAgbW9ieENvbXB1dGVkXHJcbikgYXMgYW55O1xyXG5cclxuZnVuY3Rpb24gb2JzZXJ2YWJsZUludGVybmFsKC4uLmFyZ3MpIHtcclxuICByZXR1cm4gKG1vYnhPYnNlcnZhYmxlIGFzIGFueSkoLi4uYXJncyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvYnNlcnZhYmxlOiB0eXBlb2YgbW9ieE9ic2VydmFibGUgPSBPYmplY3QuYXNzaWduKFxyXG4gIG9ic2VydmFibGVJbnRlcm5hbCxcclxuICBtb2J4T2JzZXJ2YWJsZVxyXG4pIGFzIGFueTtcclxuIl19