import * as ɵngcc0 from '@angular/core';

function TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tree-node", 2);
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("node", node_r2)("index", i_r3)("templates", ctx_r1.templates);
} }
function TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, "tree-node", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("margin-top", ctx_r0.marginTop);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.viewportNodes)("ngForTrackBy", ctx_r0.trackNode);
} }
const _c0 = function () { return { dontDetach: true }; };
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/tree-node-collection.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { reaction } from 'mobx';
import { observable, computed, action } from '../mobx-angular/mobx-proxy';
import { TreeModel } from '../models/tree.model';
export class TreeNodeCollectionComponent {
    constructor() {
        this._dispose = [];
    }
    /**
     * @return {?}
     */
    get nodes() {
        return this._nodes;
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    set nodes(nodes) {
        this.setNodes(nodes);
    }
    /**
     * @return {?}
     */
    get marginTop() {
        /** @type {?} */
        const firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];
        /** @type {?} */
        const relativePosition = firstNode && firstNode.parent
            ? firstNode.position -
                firstNode.parent.position -
                firstNode.parent.getSelfHeight()
            : 0;
        return `${relativePosition}px`;
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    setNodes(nodes) {
        this._nodes = nodes;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.virtualScroll = this.treeModel.virtualScroll;
        this._dispose = [
            // return node indexes so we can compare structurally,
            reaction((/**
             * @return {?}
             */
            () => {
                return this.virtualScroll
                    .getViewportNodes(this.nodes)
                    .map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index));
            }), (/**
             * @param {?} nodeIndexes
             * @return {?}
             */
            nodeIndexes => {
                this.viewportNodes = nodeIndexes.map((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => this.nodes[i]));
            }), (/** @type {?} */ ({ compareStructural: true, fireImmediately: true }))),
            reaction((/**
             * @return {?}
             */
            () => this.nodes), (/**
             * @param {?} nodes
             * @return {?}
             */
            nodes => {
                this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);
            }))
        ];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._dispose.forEach((/**
         * @param {?} d
         * @return {?}
         */
        d => d()));
    }
    /**
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    trackNode(index, node) {
        return node.id;
    }
}
TreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) { return new (t || TreeNodeCollectionComponent)(); };
TreeNodeCollectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeNodeCollectionComponent, selectors: [["tree-node-collection"]], inputs: { nodes: "nodes", treeModel: "treeModel", templates: "templates" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], [3, "node", "index", "templates", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "index", "templates"]], template: function TreeNodeCollectionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c0));
    } }, encapsulation: 2 });
TreeNodeCollectionComponent.propDecorators = {
    nodes: [{ type: Input }],
    treeModel: [{ type: Input }],
    templates: [{ type: Input }]
};
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeNodeCollectionComponent.prototype, "_nodes", void 0);
__decorate([
    observable,
    __metadata("design:type", Array)
], TreeNodeCollectionComponent.prototype, "viewportNodes", void 0);
__decorate([
    computed,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], TreeNodeCollectionComponent.prototype, "marginTop", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeNodeCollectionComponent.prototype, "setNodes", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{
        type: Component,
        args: [{
                selector: 'tree-node-collection',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *treeMobxAutorun="{ dontDetach: true }">
      <div [style.margin-top]="marginTop">
        <tree-node
          *ngFor="let node of viewportNodes; let i = index; trackBy: trackNode"
          [node]="node"
          [index]="i"
          [templates]="templates"
        >
        </tree-node>
      </div>
    </ng-container>
  `
            }]
    }], function () { return []; }, { nodes: [{
            type: Input
        }], treeModel: [{
            type: Input
        }], templates: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    TreeNodeCollectionComponent.prototype.treeModel;
    /** @type {?} */
    TreeNodeCollectionComponent.prototype._nodes;
    /**
     * @type {?}
     * @private
     */
    TreeNodeCollectionComponent.prototype.virtualScroll;
    /** @type {?} */
    TreeNodeCollectionComponent.prototype.templates;
    /** @type {?} */
    TreeNodeCollectionComponent.prototype.viewportNodes;
    /** @type {?} */
    TreeNodeCollectionComponent.prototype._dispose;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNvbGxlY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXRyZWUtY29tcG9uZW50L3NyYy9saWIvY29tcG9uZW50cy90cmVlLW5vZGUtY29sbGVjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFHbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUcxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFtQmpELE1BQU0sT0FBTywyQkFBMkI7QUFBRyxJQWpCM0M7QUFDRyxRQThDRCxhQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLElBb0NBLENBQUM7QUFDRDtBQUFRO0FBQW1CO0FBQVEsSUFuRWpDLElBQ0ksS0FBSztBQUNYLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNIO0FBQVE7QUFDRztBQUVYO0FBQ08sSUFKTCxJQUFJLEtBQUssQ0FBQyxLQUFLO0FBQ2pCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBRTFCLElBTVksSUFBSSxTQUFTO0FBQUs7QUFDYixjQUFQLFNBQVMsR0FDYixJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzlFO0FBQXlCLGNBQWYsZ0JBQWdCLEdBQ3BCLFNB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LEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQW5GQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQVlBLEFBQ0EsQUFFQSxBQUFBLEFBUUEsQUFBQSxBQUlBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBV0EsQUFJQSxBQUFBLEFBQUEsQUFFQSxBQXpCQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQWVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBWaWV3RW5jYXBzdWxhdGlvbixcclxuICBPbkluaXQsXHJcbiAgT25EZXN0cm95XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHJlYWN0aW9uIH0gZnJvbSAnbW9ieCc7XHJcbmltcG9ydCB7IG9ic2VydmFibGUsIGNvbXB1dGVkLCBhY3Rpb24gfSBmcm9tICcuLi9tb2J4LWFuZ3VsYXIvbW9ieC1wcm94eSc7XHJcbmltcG9ydCB7IFRyZWVWaXJ0dWFsU2Nyb2xsIH0gZnJvbSAnLi4vbW9kZWxzL3RyZWUtdmlydHVhbC1zY3JvbGwubW9kZWwnO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJy4uL21vZGVscy90cmVlLW5vZGUubW9kZWwnO1xyXG5pbXBvcnQgeyBUcmVlTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3RyZWUtbm9kZS1jb2xsZWN0aW9uJyxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGFpbmVyICp0cmVlTW9ieEF1dG9ydW49XCJ7IGRvbnREZXRhY2g6IHRydWUgfVwiPlxyXG4gICAgICA8ZGl2IFtzdHlsZS5tYXJnaW4tdG9wXT1cIm1hcmdpblRvcFwiPlxyXG4gICAgICAgIDx0cmVlLW5vZGVcclxuICAgICAgICAgICpuZ0Zvcj1cImxldCBub2RlIG9mIHZpZXdwb3J0Tm9kZXM7IGxldCBpID0gaW5kZXg7IHRyYWNrQnk6IHRyYWNrTm9kZVwiXHJcbiAgICAgICAgICBbbm9kZV09XCJub2RlXCJcclxuICAgICAgICAgIFtpbmRleF09XCJpXCJcclxuICAgICAgICAgIFt0ZW1wbGF0ZXNdPVwidGVtcGxhdGVzXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgPC90cmVlLW5vZGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJlZU5vZGVDb2xsZWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IG5vZGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX25vZGVzO1xyXG4gIH1cclxuICBzZXQgbm9kZXMobm9kZXMpIHtcclxuICAgIHRoaXMuc2V0Tm9kZXMobm9kZXMpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgdHJlZU1vZGVsOiBUcmVlTW9kZWw7XHJcblxyXG4gIEBvYnNlcnZhYmxlIF9ub2RlcztcclxuICBwcml2YXRlIHZpcnR1YWxTY3JvbGw6IFRyZWVWaXJ0dWFsU2Nyb2xsOyAvLyBDYW5ub3QgaW5qZWN0IHRoaXMsIGJlY2F1c2Ugd2UgbWlnaHQgYmUgaW5zaWRlIHRyZWVOb2RlVGVtcGxhdGVGdWxsXHJcbiAgQElucHV0KCkgdGVtcGxhdGVzO1xyXG5cclxuICBAb2JzZXJ2YWJsZSB2aWV3cG9ydE5vZGVzOiBUcmVlTm9kZVtdO1xyXG5cclxuICBAY29tcHV0ZWQgZ2V0IG1hcmdpblRvcCgpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZmlyc3ROb2RlID1cclxuICAgICAgdGhpcy52aWV3cG9ydE5vZGVzICYmIHRoaXMudmlld3BvcnROb2Rlcy5sZW5ndGggJiYgdGhpcy52aWV3cG9ydE5vZGVzWzBdO1xyXG4gICAgY29uc3QgcmVsYXRpdmVQb3NpdGlvbiA9XHJcbiAgICAgIGZpcnN0Tm9kZSAmJiBmaXJzdE5vZGUucGFyZW50XHJcbiAgICAgICAgPyBmaXJzdE5vZGUucG9zaXRpb24gLVxyXG4gICAgICAgICAgZmlyc3ROb2RlLnBhcmVudC5wb3NpdGlvbiAtXHJcbiAgICAgICAgICBmaXJzdE5vZGUucGFyZW50LmdldFNlbGZIZWlnaHQoKVxyXG4gICAgICAgIDogMDtcclxuXHJcbiAgICByZXR1cm4gYCR7cmVsYXRpdmVQb3NpdGlvbn1weGA7XHJcbiAgfVxyXG5cclxuICBfZGlzcG9zZSA9IFtdO1xyXG5cclxuICBAYWN0aW9uIHNldE5vZGVzKG5vZGVzKSB7XHJcbiAgICB0aGlzLl9ub2RlcyA9IG5vZGVzO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTY3JvbGwgPSB0aGlzLnRyZWVNb2RlbC52aXJ0dWFsU2Nyb2xsO1xyXG4gICAgdGhpcy5fZGlzcG9zZSA9IFtcclxuICAgICAgLy8gcmV0dXJuIG5vZGUgaW5kZXhlcyBzbyB3ZSBjYW4gY29tcGFyZSBzdHJ1Y3R1cmFsbHksXHJcbiAgICAgIHJlYWN0aW9uKFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnZpcnR1YWxTY3JvbGxcclxuICAgICAgICAgICAgLmdldFZpZXdwb3J0Tm9kZXModGhpcy5ub2RlcylcclxuICAgICAgICAgICAgLm1hcChuID0+IG4uaW5kZXgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbm9kZUluZGV4ZXMgPT4ge1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydE5vZGVzID0gbm9kZUluZGV4ZXMubWFwKGkgPT4gdGhpcy5ub2Rlc1tpXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IGNvbXBhcmVTdHJ1Y3R1cmFsOiB0cnVlLCBmaXJlSW1tZWRpYXRlbHk6IHRydWUgfSBhcyBhbnlcclxuICAgICAgKSxcclxuICAgICAgcmVhY3Rpb24oXHJcbiAgICAgICAgKCkgPT4gdGhpcy5ub2RlcyxcclxuICAgICAgICBub2RlcyA9PiB7XHJcbiAgICAgICAgICB0aGlzLnZpZXdwb3J0Tm9kZXMgPSB0aGlzLnZpcnR1YWxTY3JvbGwuZ2V0Vmlld3BvcnROb2Rlcyhub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl9kaXNwb3NlLmZvckVhY2goZCA9PiBkKCkpO1xyXG4gIH1cclxuXHJcbiAgdHJhY2tOb2RlKGluZGV4LCBub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS5pZDtcclxuICB9XHJcbn1cclxuIl19