/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/tree-drop.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, Renderer2 } from '@angular/core';
import { TreeDraggedElement } from '../models/tree-dragged-element.model';
/** @type {?} */
const DRAG_OVER_CLASS = 'is-dragging-over';
/** @type {?} */
const DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';
export class TreeDropDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} treeDraggedElement
     * @param {?} ngZone
     */
    constructor(el, renderer, treeDraggedElement, ngZone) {
        this.el = el;
        this.renderer = renderer;
        this.treeDraggedElement = treeDraggedElement;
        this.ngZone = ngZone;
        this.allowDragoverStyling = true;
        this.onDropCallback = new EventEmitter();
        this.onDragOverCallback = new EventEmitter();
        this.onDragLeaveCallback = new EventEmitter();
        this.onDragEnterCallback = new EventEmitter();
        this._allowDrop = (/**
         * @param {?} element
         * @param {?} $event
         * @return {?}
         */
        (element, $event) => true);
        this.dragOverEventHandler = this.onDragOver.bind(this);
        this.dragEnterEventHandler = this.onDragEnter.bind(this);
        this.dragLeaveEventHandler = this.onDragLeave.bind(this);
    }
    /**
     * @param {?} allowDrop
     * @return {?}
     */
    set treeAllowDrop(allowDrop) {
        if (allowDrop instanceof Function) {
            this._allowDrop = allowDrop;
        }
        else
            this._allowDrop = (/**
             * @param {?} element
             * @param {?} $event
             * @return {?}
             */
            (element, $event) => allowDrop);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    allowDrop($event) {
        return this._allowDrop(this.treeDraggedElement.get(), $event);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        let el = this.el.nativeElement;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            el.addEventListener('dragover', this.dragOverEventHandler);
            el.addEventListener('dragenter', this.dragEnterEventHandler);
            el.addEventListener('dragleave', this.dragLeaveEventHandler);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        let el = this.el.nativeElement;
        el.removeEventListener('dragover', this.dragOverEventHandler);
        el.removeEventListener('dragenter', this.dragEnterEventHandler);
        el.removeEventListener('dragleave', this.dragLeaveEventHandler);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDragOver($event) {
        if (!this.allowDrop($event)) {
            if (this.allowDragoverStyling) {
                return this.addDisabledClass();
            }
            return;
        }
        this.onDragOverCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
        $event.preventDefault();
        if (this.allowDragoverStyling) {
            this.addClass();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDragEnter($event) {
        if (!this.allowDrop($event))
            return;
        $event.preventDefault();
        this.onDragEnterCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDragLeave($event) {
        if (!this.allowDrop($event)) {
            if (this.allowDragoverStyling) {
                return this.removeDisabledClass();
            }
            return;
        }
        this.onDragLeaveCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
        if (this.allowDragoverStyling) {
            this.removeClass();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDrop($event) {
        if (!this.allowDrop($event))
            return;
        $event.preventDefault();
        this.onDropCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
        if (this.allowDragoverStyling) {
            this.removeClass();
        }
        this.treeDraggedElement.set(null);
    }
    /**
     * @private
     * @return {?}
     */
    addClass() {
        this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);
    }
    /**
     * @private
     * @return {?}
     */
    removeClass() {
        this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);
    }
    /**
     * @private
     * @return {?}
     */
    addDisabledClass() {
        this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);
    }
    /**
     * @private
     * @return {?}
     */
    removeDisabledClass() {
        this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);
    }
}
TreeDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[treeDrop]'
            },] }
];
/** @nocollapse */
TreeDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TreeDraggedElement },
    { type: NgZone }
];
TreeDropDirective.propDecorators = {
    allowDragoverStyling: [{ type: Input }],
    onDropCallback: [{ type: Output, args: ['treeDrop',] }],
    onDragOverCallback: [{ type: Output, args: ['treeDropDragOver',] }],
    onDragLeaveCallback: [{ type: Output, args: ['treeDropDragLeave',] }],
    onDragEnterCallback: [{ type: Output, args: ['treeDropDragEnter',] }],
    treeAllowDrop: [{ type: Input }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TreeDropDirective.prototype.allowDragoverStyling;
    /** @type {?} */
    TreeDropDirective.prototype.onDropCallback;
    /** @type {?} */
    TreeDropDirective.prototype.onDragOverCallback;
    /** @type {?} */
    TreeDropDirective.prototype.onDragLeaveCallback;
    /** @type {?} */
    TreeDropDirective.prototype.onDragEnterCallback;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.dragOverEventHandler;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.dragEnterEventHandler;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.dragLeaveEventHandler;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype._allowDrop;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.treeDraggedElement;
    /**
     * @type {?}
     * @private
     */
    TreeDropDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,