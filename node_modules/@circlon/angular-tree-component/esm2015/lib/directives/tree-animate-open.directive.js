/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/tree-animate-open.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const EASE_ACCELERATION = 1.005;
export class TreeAnimateOpenDirective {
    /**
     * @param {?} renderer
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(renderer, templateRef, viewContainerRef) {
        this.renderer = renderer;
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        if (value) {
            this._show();
            if (this.isEnabled && this._isOpen === false) {
                this._animateOpen();
            }
        }
        else {
            this.isEnabled ? this._animateClose() : this._hide();
        }
        this._isOpen = !!value;
    }
    ;
    /**
     * @private
     * @return {?}
     */
    _show() {
        if (this.innerElement)
            return;
        // create child view
        this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];
    }
    /**
     * @private
     * @return {?}
     */
    _hide() {
        this.viewContainerRef.clear();
        this.innerElement = null;
    }
    /**
     * @private
     * @return {?}
     */
    _animateOpen() {
        /** @type {?} */
        let delta = this.animateSpeed;
        /** @type {?} */
        let ease = this.animateAcceleration;
        /** @type {?} */
        let maxHeight = 0;
        // set height to 0
        this.renderer.setStyle(this.innerElement, 'max-height', `0`);
        // increase maxHeight until height doesn't change
        setTimeout((/**
         * @return {?}
         */
        () => {
            // Allow inner element to create its content
            /** @type {?} */
            const i = setInterval((/**
             * @return {?}
             */
            () => {
                if (!this._isOpen || !this.innerElement)
                    return clearInterval(i);
                maxHeight += delta;
                /** @type {?} */
                const roundedMaxHeight = Math.round(maxHeight);
                this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);
                /** @type {?} */
                const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0;
                delta *= ease;
                ease *= EASE_ACCELERATION;
                if (height < roundedMaxHeight) {
                    // Make maxHeight auto because animation finished and container might change height later on
                    this.renderer.setStyle(this.innerElement, 'max-height', null);
                    clearInterval(i);
                }
            }), 17);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _animateClose() {
        if (!this.innerElement)
            return;
        /** @type {?} */
        let delta = this.animateSpeed;
        /** @type {?} */
        let ease = this.animateAcceleration;
        /** @type {?} */
        let height = this.innerElement.getBoundingClientRect().height;
        // TBD use renderer
        // slowly decrease maxHeight to 0, starting from current height
        /** @type {?} */
        const i = setInterval((/**
         * @return {?}
         */
        () => {
            if (this._isOpen || !this.innerElement)
                return clearInterval(i);
            height -= delta;
            this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);
            delta *= ease;
            ease *= EASE_ACCELERATION;
            if (height <= 0) {
                // after animation complete - remove child element
                this.viewContainerRef.clear();
                this.innerElement = null;
                clearInterval(i);
            }
        }), 17);
    }
}
TreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) { return new (t || TreeAnimateOpenDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
TreeAnimateOpenDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TreeAnimateOpenDirective, selectors: [["", "treeAnimateOpen", ""]], inputs: { isOpen: ["treeAnimateOpen", "isOpen"], animateSpeed: ["treeAnimateOpenSpeed", "animateSpeed"], animateAcceleration: ["treeAnimateOpenAcceleration", "animateAcceleration"], isEnabled: ["treeAnimateOpenEnabled", "isEnabled"] } });
/** @nocollapse */
TreeAnimateOpenDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: TemplateRef },
    { type: ViewContainerRef }
];
TreeAnimateOpenDirective.propDecorators = {
    animateSpeed: [{ type: Input, args: ['treeAnimateOpenSpeed',] }],
    animateAcceleration: [{ type: Input, args: ['treeAnimateOpenAcceleration',] }],
    isEnabled: [{ type: Input, args: ['treeAnimateOpenEnabled',] }],
    isOpen: [{ type: Input, args: ['treeAnimateOpen',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{
        type: Directive,
        args: [{
                selector: '[treeAnimateOpen]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { isOpen: [{
            type: Input,
            args: ['treeAnimateOpen']
        }], animateSpeed: [{
            type: Input,
            args: ['treeAnimateOpenSpeed']
        }], animateAcceleration: [{
            type: Input,
            args: ['treeAnimateOpenAcceleration']
        }], isEnabled: [{
            type: Input,
            args: ['treeAnimateOpenEnabled']
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeAnimateOpenDirective.prototype._isOpen;
    /** @type {?} */
    TreeAnimateOpenDirective.prototype.animateSpeed;
    /** @type {?} */
    TreeAnimateOpenDirective.prototype.animateAcceleration;
    /** @type {?} */
    TreeAnimateOpenDirective.prototype.isEnabled;
    /**
     * @type {?}
     * @private
     */
    TreeAnimateOpenDirective.prototype.innerElement;
    /**
     * @type {?}
     * @private
     */
    TreeAnimateOpenDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    TreeAnimateOpenDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    TreeAnimateOpenDirective.prototype.viewContainerRef;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,