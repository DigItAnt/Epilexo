{"version":3,"sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts"],"names":["TreeMobxAutorunDirective","templateRef","viewContainer","this","templateBindings","prototype","ngOnInit","view","createEmbeddedView","dispose","shouldDetach","detach","autoDetect","treeMobxAutorun","autorun","detectChanges","ngOnDestroy","Directive","args","selector","TemplateRef","ViewContainerRef","Input","KEYS","LEFT","UP","RIGHT","DOWN","ENTER","SPACE","CONTEXT_MENU","TREE_ACTIONS","TOGGLE_ACTIVE","tree","node","$event","toggleActivated","TOGGLE_ACTIVE_MULTI","TOGGLE_SELECTED","toggleSelected","ACTIVATE","setIsActive","DEACTIVATE","SELECT","setIsSelected","DESELECT","FOCUS","focus","TOGGLE_EXPANDED","hasChildren","toggleExpanded","EXPAND","expand","COLLAPSE","collapse","DRILL_DOWN","focusDrillDown","DRILL_UP","focusDrillUp","NEXT_NODE","focusNextNode","PREVIOUS_NODE","focusPreviousNode","MOVE_NODE","_a","from","to","ctrlKey","copyNode","moveNode","defaultActionMapping","mouse","click","dblClick","contextMenu","expanderClick","checkboxClick","drop","keys","TreeOptions","options","actionMapping","defaultsDeep","rtl","get","Object","defineProperty","hasChildrenField","childrenField","displayField","idField","isExpandedField","getChildren","levelPadding","useVirtualScroll","animateExpand","animateSpeed","animateAcceleration","undefined","scrollOnActivate","rootId","useCheckbox","useTriState","scrollContainer","allowDragoverStyling","getNodeClone","omit","assign","data","allowDrop","element","Function","allowDrag","nodeClass","nodeHeight","virtual","index","dropSlotHeight","isNumber","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TREE_EVENTS","activate","deactivate","nodeActivate","nodeDeactivate","select","deselect","blur","initialized","updateData","event","loadNodeChildren","changeFilter","stateChange","TreeNode","parent","treeModel","_this","position","id","Math","floor","random","getField","_initChildren","autoLoadChildren","isHidden","isExpanded","isActive","isNodeFocused","isSelectable","isSelected","some","children","every","isAllSelected","level","path","_originalNode","isRoot","fireEvent","setField","key","_findAdjacentSibling","steps","skipHidden","siblings","_getParentsChildren","indexOf","findNextSibling","findPreviousSibling","getVisibleChildren","visibleChildren","filter","getFirstChild","first","getLastChild","last","findNextNode","goInside","findPreviousNode","previousSibling","_getLastOpenDescendant","realParent","lastChild","isCollapsed","getIndexInParent","isDescendantOf","getNodePadding","getClass","join","onDrop","mouseAction","dropOnNode","Promise","resolve","then","forEach","child","eventName","doForAll","fn","expandAll","collapseAll","ensureVisible","setIsExpanded","setExpandedNode","handler","reaction","fireImmediately","multi","setActiveNode","isLeaf","setSelectedNode","setActiveAndVisible","setTimeout","scrollIntoView","bind","force","virtualScroll","scroll","previousNode","getFocusedNode","setFocusedNode","setIsHidden","hide","show","actionName","setFocus","getSelfHeight","map","c","__decorate","computed","observable","action","TreeModel","eventNames","expandedNodeIds","selectedLeafNodeIds","activeNodeIds","hiddenNodeIds","focusedNodeId","firstUpdate","subscriptions","events","emit","subscribe","subscription","focusedNode","getActiveNode","activeNodes","getActiveNodes","getVisibleRoots","virtualRoot","getFirstRoot","roots","getLastRoot","focusedTree","isEmptyTree","getNodeById","nodes","compact","getNodeByPath","startNode","childId","shift","childNode","find","idStr","toString","getNodeBy","predicate","found","_b","_c","foundInChildren","unsubscribeAll","unsubscribe","setData","update","virtualRootConfig","_calculateExpandedNodes","root","nextNode","_setActiveNodeMulti","_setActiveNodeSingle","setHiddenNodeIds","nodeIds","reduce","performKeyAction","keyAction","keyCode","preventDefault","filterNodes","autoShow","filterFn","clearFilter","isString","toLowerCase","isFunction","console","ids","_filterNode","fromIndex","fromParent","canMoveNode","fromChildren","toChildren","originalNode","splice","toIndex","nodeCopy","getState","setState","state","subscribeToState","calculateExpandedNodes","isVisible","activeNode","Injectable","TreeDraggedElement","_draggedElement","set","draggedElement","isDragging","providedIn","TreeVirtualScroll","yBlocks","x","viewportHeight","viewport","_dispose","fixScroll","height","init","recalcPositions","isEnabled","_setYBlocks","_getPositionAfter","startPos","_getPositionAfterNode","clear","d","setViewport","scrollLeft","round","scrollTop","getBoundingClientRect","scrollToMiddle","scrollContainerHeight","scrollContainerTop","top","nodeTop","y","getViewportNodes","visibleNodes","lastVisibleNode","slice","firstIndex","binarySearch","lastIndex","viewportNodes","maxY","max","totalHeight","condition","midIndex","Component","encapsulation","ViewEncapsulation","None","template","TreeComponent","treeDraggedElement","name","EventEmitter","onKeydown","isFocused","includes","document","activeElement","tagName","onMousedown","isOutsideClick","startElement","nodeName","localName","parentElement","target","ngOnChanges","changes","currentValue","pick","sizeChanged","viewportComponent","providers","ContentChild","static","ViewChild","Output","HostListener","TreeNodeDropSlot","dropIndex","actionInternal","_i","mobxAction","apply","mobxComputed","mobxObservable","TreeNodeCollectionComponent","_nodes","setNodes","firstNode","nodeIndexes","compareStructural","trackNode","TreeViewportComponent","elementRef","ngZone","throttle","nativeElement","scrollEventHandler","ngAfterViewInit","el","runOutsideAngular","addEventListener","removeEventListener","getTotalHeight","ElementRef","NgZone","TreeDropDirective","renderer","onDropCallback","onDragOverCallback","onDragLeaveCallback","onDragEnterCallback","_allowDrop","dragOverEventHandler","onDragOver","dragEnterEventHandler","onDragEnter","dragLeaveEventHandler","onDragLeave","addDisabledClass","addClass","removeDisabledClass","removeClass","Renderer2","TreeDragDirective","dragEventHandler","onDrag","ngDoCheck","setAttribute","treeDragEnabled","onDragStart","ev","dataTransfer","onDragEnd","TreeAnimateOpenDirective","viewContainerRef","_show","_isOpen","_animateOpen","_animateClose","_hide","innerElement","rootNodes","delta","ease","maxHeight","setStyle","setInterval","clearInterval","roundedMaxHeight","NgModule","declarations","TreeNodeComponent","TreeNodeContent","LoadingComponent","TreeNodeExpanderComponent","TreeNodeChildrenComponent","TreeNodeWrapperComponent","TreeNodeCheckboxComponent","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nimport { defaultsDeep, get, omit, isNumber } from 'lodash-es';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = defaultsDeep({}, this.options.actionMapping, defaultActionMapping);\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    return omit(Object.assign({}, node.data), ['id']);\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return isNumber(this.options.dropSlotHeight) ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nimport { first, last, some, every } from 'lodash-es';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return some(this.children, (node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return every(this.children, (node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return first(children || []);\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return last(children || []);\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nimport { first, last, compact, find, isString, isFunction } from 'lodash-es';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    return first(skipHidden ? this.getVisibleRoots() : this.roots);\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    return last(skipHidden ? this.getVisibleRoots() : this.roots);\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = find(startNode.children, { id: childId });\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = find(startNode.children, predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (isString(filter)) {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (isFunction(filter)) {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\nimport { includes, pick } from 'lodash-es';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (includes(['input', 'textarea'],\r\n      document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component , Input , ViewEncapsulation , TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\nimport { throttle } from 'lodash-es';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private ngZone: NgZone,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('scroll', this.scrollEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n"]}