(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ng-modal-lib', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global['ng-modal-lib'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common, rxjs, operators) { 
var _c0 = ["modalRoot"];
var _c1 = ["modalBody"];
var _c2 = ["modalHeader"];
var _c3 = ["modalFooter"];
var _c4 = ["closeIcon"];
var _c5 = function (a0, a1) { return { "dt-icon-maximize": a0, "dt-icon-normalize": a1 }; };
function ModalComponent_i_8_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 14);
    ɵngcc0.ɵɵlistener("click", function ModalComponent_i_8_Template_i_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.toggleMaximize($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c5, !ctx_r2.maximized, ctx_r2.maximized));
} }
var _c6 = [[["", 8, "app-modal-header"]], [["", 8, "app-modal-body"]], [["", 8, "app-modal-footer"]]];
var _c7 = [".app-modal-header", ".app-modal-body", ".app-modal-footer"];
'use strict';

    function isLeftButton(event) {
        if (event.type === 'touchstart') {
            return true;
        }
        return (event.type === 'mousedown' && event.button === 0);
    }
    function getEvent(event) {
        if (event.type === 'touchend' || event.type === 'touchcancel') {
            return event.changedTouches[0];
        }
        return event.type.startsWith('touch') ? event.targetTouches[0] : event;
    }
    function maxZIndex(selectors) {
        if (selectors === void 0) { selectors = 'body *'; }
        return Array.from(document.querySelectorAll(selectors))
            .map(function (a) { return parseFloat(window.getComputedStyle(a).zIndex); })
            .filter(function (a) { return !isNaN(a); })
            .sort(function (a, b) { return a - b; })
            .pop() || 0;
    }
    function findAncestor(el, selectors) {
        if (typeof el.closest === 'function') {
            return el.closest(selectors) || null;
        }
        while (el) {
            if (el.matches(selectors)) {
                return el;
            }
            el = el.parentElement;
        }
        return null;
    }

    var ModalComponent = /** @class */ (function () {
        function ModalComponent(element) {
            this.element = element;
            this.scrollTopEnable = true;
            this.backdrop = true;
            this.closeModal = new core.EventEmitter();
        }
        ModalComponent.prototype.ngAfterViewChecked = function () {
            if (this.executePostDisplayActions) {
                this.center();
                this.executePostDisplayActions = false;
            }
        };
        ModalComponent.prototype.onKeyDown = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.hide();
        };
        ModalComponent.prototype.onWindowResize = function () {
            this.executePostDisplayActions = true;
            this.center();
        };
        ModalComponent.prototype.show = function () {
            var _this = this;
            this.executePostDisplayActions = true;
            this.visible = true;
            setTimeout(function () {
                _this.modalRoot.nativeElement.focus();
                if (_this.scrollTopEnable) {
                    _this.modalBody.nativeElement.scrollTop = 0;
                }
            }, 1);
        };
        ModalComponent.prototype.hide = function () {
            this.visible = false;
            this.closeModal.emit(true);
            this.focusLastModal();
        };
        ModalComponent.prototype.center = function () {
            var elementWidth = this.modalRoot.nativeElement.offsetWidth;
            var elementHeight = this.modalRoot.nativeElement.offsetHeight;
            if (elementWidth === 0 && elementHeight === 0) {
                this.modalRoot.nativeElement.style.visibility = 'hidden';
                this.modalRoot.nativeElement.style.display = 'block';
                elementWidth = this.modalRoot.nativeElement.offsetWidth;
                elementHeight = this.modalRoot.nativeElement.offsetHeight;
                this.modalRoot.nativeElement.style.display = 'none';
                this.modalRoot.nativeElement.style.visibility = 'visible';
            }
            var x = Math.max((window.innerWidth - elementWidth) / 2, 0);
            var y = Math.max((window.innerHeight - elementHeight) / 2, 0);
            this.modalRoot.nativeElement.style.left = x + 'px';
            this.modalRoot.nativeElement.style.top = y + 'px';
        };
        ModalComponent.prototype.initDrag = function (event) {
            if (event.target === this.closeIcon.nativeElement) {
                return;
            }
            if (!this.maximized) {
                this.dragEventTarget = event;
            }
        };
        ModalComponent.prototype.onResize = function (event) {
            if (event.direction === 'vertical') {
                this.calcBodyHeight();
            }
        };
        ModalComponent.prototype.calcBodyHeight = function () {
            var diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;
            var contentHeight = this.modalRoot.nativeElement.offsetHeight - diffHeight;
            this.modalBody.nativeElement.style.height = contentHeight + 'px';
            this.modalBody.nativeElement.style.maxHeight = 'none';
        };
        ModalComponent.prototype.getMaxModalIndex = function () {
            return maxZIndex('.ui-modal');
        };
        ModalComponent.prototype.focusLastModal = function () {
            var modal = findAncestor(this.element.nativeElement.parentElement, '.ui-modal');
            if (modal) {
                modal.focus();
            }
        };
        ModalComponent.prototype.toggleMaximize = function (event) {
            if (this.maximized) {
                this.revertMaximize();
            }
            else {
                this.maximize();
            }
            event.preventDefault();
        };
        ModalComponent.prototype.maximize = function () {
            this.preMaximizePageX = parseFloat(this.modalRoot.nativeElement.style.top);
            this.preMaximizePageY = parseFloat(this.modalRoot.nativeElement.style.left);
            this.preMaximizeRootWidth = this.modalRoot.nativeElement.offsetWidth;
            this.preMaximizeRootHeight = this.modalRoot.nativeElement.offsetHeight;
            this.preMaximizeBodyHeight = this.modalBody.nativeElement.offsetHeight;
            this.modalRoot.nativeElement.style.top = '0px';
            this.modalRoot.nativeElement.style.left = '0px';
            this.modalRoot.nativeElement.style.width = '100vw';
            this.modalRoot.nativeElement.style.height = '100vh';
            var diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;
            this.modalBody.nativeElement.style.height = 'calc(100vh - ' + diffHeight + 'px)';
            this.modalBody.nativeElement.style.maxHeight = 'none';
            this.maximized = true;
        };
        ModalComponent.prototype.revertMaximize = function () {
            this.modalRoot.nativeElement.style.top = this.preMaximizePageX + 'px';
            this.modalRoot.nativeElement.style.left = this.preMaximizePageY + 'px';
            this.modalRoot.nativeElement.style.width = this.preMaximizeRootWidth + 'px';
            this.modalRoot.nativeElement.style.height = this.preMaximizeRootHeight + 'px';
            this.modalBody.nativeElement.style.height = this.preMaximizeBodyHeight + 'px';
            this.maximized = false;
        };
        ModalComponent.prototype.moveOnTop = function () {
            if (!this.backdrop) {
                var maxModalIndex = this.getMaxModalIndex();
                var zIndex = parseFloat(window.getComputedStyle(this.modalRoot.nativeElement).zIndex) || 0;
                if (zIndex <= maxModalIndex) {
                    zIndex = maxModalIndex + 1;
                    this.modalRoot.nativeElement.style.zIndex = zIndex.toString();
                }
            }
        };
ModalComponent.ɵfac = function ModalComponent_Factory(t) { return new (t || ModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ModalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ModalComponent, selectors: [["app-modal"]], viewQuery: function ModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
        ɵngcc0.ɵɵviewQuery(_c4, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRoot = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalBody = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalHeader = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalFooter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.closeIcon = _t.first);
    } }, hostBindings: function ModalComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.esc", function ModalComponent_keydown_esc_HostBindingHandler($event) { return ctx.onKeyDown($event); })("resize", function ModalComponent_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { scrollTopEnable: "scrollTopEnable", backdrop: "backdrop", maximizable: "maximizable", inViewport: "inViewport" }, outputs: { closeModal: "closeModal" }, ngContentSelectors: _c7, decls: 17, vars: 15, consts: [[1, "ui-modal-overlay"], ["tabindex", "-1", "role", "dialog", "appResizable", "", "appDraggable", "", 1, "ui-modal", 3, "south", "east", "southEast", "southWest", "west", "northWest", "north", "northEast", "dragEventTarget", "inViewport", "resizing", "mousedown", "touchstart"], ["modalRoot", ""], [1, "ui-modal-header", 3, "mousedown", "touchstart"], ["modalHeader", ""], [1, "ui-titlebar"], [1, "ui-controlbar"], ["class", "ui-icon", 3, "ngClass", "click", 4, "ngIf"], [1, "ui-icon", "dt-icon-close", 3, "click"], ["closeIcon", ""], [1, "ui-modal-body"], ["modalBody", ""], [1, "ui-modal-footer"], ["modalFooter", ""], [1, "ui-icon", 3, "ngClass", "click"]], template: function ModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵelement(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1, 2);
        ɵngcc0.ɵɵlistener("resizing", function ModalComponent_Template_div_resizing_1_listener($event) { return ctx.onResize($event); })("mousedown", function ModalComponent_Template_div_mousedown_1_listener() { return ctx.moveOnTop(); })("touchstart", function ModalComponent_Template_div_touchstart_1_listener() { return ctx.moveOnTop(); });
        ɵngcc0.ɵɵelementStart(3, "div", 3, 4);
        ɵngcc0.ɵɵlistener("mousedown", function ModalComponent_Template_div_mousedown_3_listener($event) { return ctx.initDrag($event); })("touchstart", function ModalComponent_Template_div_touchstart_3_listener($event) { return ctx.initDrag($event); });
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵtemplate(8, ModalComponent_i_8_Template, 1, 4, "i", 7);
        ɵngcc0.ɵɵelementStart(9, "i", 8, 9);
        ɵngcc0.ɵɵlistener("click", function ModalComponent_Template_i_click_9_listener() { return ctx.hide(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 10, 11);
        ɵngcc0.ɵɵprojection(13, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 12, 13);
        ɵngcc0.ɵɵprojection(16, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.visible && ctx.backdrop ? "block" : "none");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("display", ctx.visible ? "block" : "none");
        ɵngcc0.ɵɵproperty("south", true)("east", true)("southEast", true)("southWest", true)("west", true)("northWest", true)("north", true)("northEast", true)("dragEventTarget", ctx.dragEventTarget)("inViewport", ctx.inViewport);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngIf", ctx.maximizable);
    } }, directives: function () { return [ResizableDirective, DraggableDirective, ɵngcc1.NgIf, ɵngcc1.NgClass]; }, styles: [".ui-modal *,.ui-modal :after,.ui-modal :before{box-sizing:border-box}.ui-modal,.ui-modal-overlay{z-index:10}.ui-modal-overlay{background-color:rgba(0,0,0,.2);height:100%;width:100%}.ui-modal,.ui-modal-overlay{display:none;left:0;position:fixed;top:0}.ui-modal{background-color:#fff;box-shadow:0 .25rem .5rem 0 rgba(0,0,0,.2),0 .375rem 1.25rem 0 rgba(0,0,0,.19);min-height:12.5rem;min-width:16.25rem;outline:none;padding:0;width:31.25rem}.ui-modal-header{-webkit-user-select:none;align-items:center;background-color:var(--dt-color-primary,#5b9bd5);color:#fff;display:flex;flex-direction:row;flex-wrap:nowrap;padding:.5rem 1rem;position:relative;user-select:none}.ui-modal-body{-webkit-overflow-scrolling:touch;max-height:calc(100vh - 12.5rem);overflow-y:auto;padding:.625rem 1rem;position:relative}.ui-modal-footer{padding:1rem}.ui-titlebar{flex-grow:1;font-size:1.125rem;height:100%;overflow:hidden}.ui-controlbar,.ui-titlebar{align-items:center;display:flex}.ui-controlbar{background-color:inherit}.ui-icon{cursor:pointer;font-size:1.4rem;margin-left:.3em}.ui-icon:hover{opacity:.75}.dragging{-webkit-user-select:none;box-shadow:0 .25rem .5rem rgba(102,175,233,.6),0 .375rem 1.25rem rgba(0,0,0,.2);cursor:move;outline:0;user-select:none}.dt-icon-maximize{background-color:initial;border:.1em solid;border-top:.2em solid}.dt-icon-maximize,.dt-icon-normalize{display:inline-block;height:1em;position:relative;width:1em}.dt-icon-normalize{background-color:inherit}.dt-icon-normalize:after,.dt-icon-normalize:before{background-color:inherit;border:.1em solid;content:\"\";height:.8em;position:absolute;width:.8em}.dt-icon-normalize:before{right:0;top:0}.dt-icon-normalize:after{border-top-width:.2em;bottom:0;left:0}.dt-icon-close{background-color:initial;display:inline-block;height:1em;position:relative;width:1em}.dt-icon-close:after,.dt-icon-close:before{background-color:currentColor;content:\"\";height:.18em;left:50%;position:absolute;top:50%;width:1.2em}.dt-icon-close:before{transform:translate(-50%,-50%) rotate(-225deg)}.dt-icon-close:after{transform:translate(-50%,-50%) rotate(225deg)}.resize-handle-e{cursor:e-resize;height:100%;position:absolute;right:-.3125rem;top:0;width:.4375rem}.resize-handle-se{bottom:0;cursor:se-resize;height:1rem;position:absolute;right:0;width:1rem}.resize-handle-s{bottom:-.3125rem;cursor:s-resize;height:.4375rem;left:0;position:absolute;width:100%}.resize-handle-sw{bottom:0;cursor:sw-resize;height:7px;height:15px;left:0;position:absolute;width:15px}.resize-handle-w{cursor:w-resize;height:100%;left:-5px;position:absolute;top:0;width:7px}.resize-handle-nw{cursor:nw-resize;height:7px;height:15px;left:0;position:absolute;top:0;width:15px}.resize-handle-n{cursor:n-resize;height:7px;left:0;position:absolute;top:-5px;width:95%}.resize-handle-ne{cursor:ne-resize;height:7px;height:15px;position:absolute;right:0;top:0;width:15px}.resizing{-webkit-user-select:none;user-select:none}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalComponent, [{
        type: core.Component,
        args: [{
                selector: 'app-modal',
                template: "<div class=\"ui-modal-overlay\" [style.display]=\"(visible && backdrop) ? 'block' : 'none'\"></div>\n\n<div class=\"ui-modal\" tabindex=\"-1\" role=\"dialog\"\n     #modalRoot\n     appResizable\n     [south]=\"true\"\n     [east]=\"true\"\n     [southEast]=\"true\"\n     [southWest]=\"true\"\n     [west]=\"true\"\n     [northWest]=\"true\"\n     [north]=\"true\"\n     [northEast]=\"true\"\n     (resizing)=\"onResize($event)\"\n     appDraggable\n     [dragEventTarget]=\"dragEventTarget\"\n     [inViewport]=\"inViewport\"\n     [style.display]=\"visible ? 'block' : 'none'\"\n     (mousedown)=\"moveOnTop()\"\n     (touchstart)=\"moveOnTop()\">\n    <div class=\"ui-modal-header\" #modalHeader\n         (mousedown)=\"initDrag($event)\"\n         (touchstart)=\"initDrag($event)\">\n      <div class=\"ui-titlebar\">\n          <ng-content select=\".app-modal-header\"></ng-content>\n      </div>\n      <div class=\"ui-controlbar\">\n          <i class=\"ui-icon\"\n             *ngIf=\"maximizable\"\n             (click)=\"toggleMaximize($event)\"\n             [ngClass]=\"{'dt-icon-maximize': !maximized, 'dt-icon-normalize': maximized}\">\n          </i>\n          <i class=\"ui-icon dt-icon-close\" #closeIcon (click)=\"hide()\">\n          </i>\n      </div>\n    </div>\n\n    <div class=\"ui-modal-body\" #modalBody>\n      <ng-content select=\".app-modal-body\"></ng-content>\n    </div>\n    <div class=\"ui-modal-footer\" #modalFooter>\n      <ng-content select=\".app-modal-footer\"></ng-content>\n    </div>\n</div>\n",
                encapsulation: core.ViewEncapsulation.None,
                styles: [".ui-modal *,.ui-modal :after,.ui-modal :before{box-sizing:border-box}.ui-modal,.ui-modal-overlay{z-index:10}.ui-modal-overlay{background-color:rgba(0,0,0,.2);height:100%;width:100%}.ui-modal,.ui-modal-overlay{display:none;left:0;position:fixed;top:0}.ui-modal{background-color:#fff;box-shadow:0 .25rem .5rem 0 rgba(0,0,0,.2),0 .375rem 1.25rem 0 rgba(0,0,0,.19);min-height:12.5rem;min-width:16.25rem;outline:none;padding:0;width:31.25rem}.ui-modal-header{-webkit-user-select:none;align-items:center;background-color:var(--dt-color-primary,#5b9bd5);color:#fff;display:flex;flex-direction:row;flex-wrap:nowrap;padding:.5rem 1rem;position:relative;user-select:none}.ui-modal-body{-webkit-overflow-scrolling:touch;max-height:calc(100vh - 12.5rem);overflow-y:auto;padding:.625rem 1rem;position:relative}.ui-modal-footer{padding:1rem}.ui-titlebar{flex-grow:1;font-size:1.125rem;height:100%;overflow:hidden}.ui-controlbar,.ui-titlebar{align-items:center;display:flex}.ui-controlbar{background-color:inherit}.ui-icon{cursor:pointer;font-size:1.4rem;margin-left:.3em}.ui-icon:hover{opacity:.75}.dragging{-webkit-user-select:none;box-shadow:0 .25rem .5rem rgba(102,175,233,.6),0 .375rem 1.25rem rgba(0,0,0,.2);cursor:move;outline:0;user-select:none}.dt-icon-maximize{background-color:initial;border:.1em solid;border-top:.2em solid}.dt-icon-maximize,.dt-icon-normalize{display:inline-block;height:1em;position:relative;width:1em}.dt-icon-normalize{background-color:inherit}.dt-icon-normalize:after,.dt-icon-normalize:before{background-color:inherit;border:.1em solid;content:\"\";height:.8em;position:absolute;width:.8em}.dt-icon-normalize:before{right:0;top:0}.dt-icon-normalize:after{border-top-width:.2em;bottom:0;left:0}.dt-icon-close{background-color:initial;display:inline-block;height:1em;position:relative;width:1em}.dt-icon-close:after,.dt-icon-close:before{background-color:currentColor;content:\"\";height:.18em;left:50%;position:absolute;top:50%;width:1.2em}.dt-icon-close:before{transform:translate(-50%,-50%) rotate(-225deg)}.dt-icon-close:after{transform:translate(-50%,-50%) rotate(225deg)}.resize-handle-e{cursor:e-resize;height:100%;position:absolute;right:-.3125rem;top:0;width:.4375rem}.resize-handle-se{bottom:0;cursor:se-resize;height:1rem;position:absolute;right:0;width:1rem}.resize-handle-s{bottom:-.3125rem;cursor:s-resize;height:.4375rem;left:0;position:absolute;width:100%}.resize-handle-sw{bottom:0;cursor:sw-resize;height:7px;height:15px;left:0;position:absolute;width:15px}.resize-handle-w{cursor:w-resize;height:100%;left:-5px;position:absolute;top:0;width:7px}.resize-handle-nw{cursor:nw-resize;height:7px;height:15px;left:0;position:absolute;top:0;width:15px}.resize-handle-n{cursor:n-resize;height:7px;left:0;position:absolute;top:-5px;width:95%}.resize-handle-ne{cursor:ne-resize;height:7px;height:15px;position:absolute;right:0;top:0;width:15px}.resizing{-webkit-user-select:none;user-select:none}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { scrollTopEnable: [{
            type: core.Input
        }], backdrop: [{
            type: core.Input
        }], closeModal: [{
            type: core.Output
        }], onKeyDown: [{
            type: core.HostListener,
            args: ['keydown.esc', ['$event']]
        }], onWindowResize: [{
            type: core.HostListener,
            args: ['window:resize']
        }], maximizable: [{
            type: core.Input
        }], inViewport: [{
            type: core.Input
        }], modalRoot: [{
            type: core.ViewChild,
            args: ['modalRoot', { static: false }]
        }], modalBody: [{
            type: core.ViewChild,
            args: ['modalBody', { static: false }]
        }], modalHeader: [{
            type: core.ViewChild,
            args: ['modalHeader', { static: false }]
        }], modalFooter: [{
            type: core.ViewChild,
            args: ['modalFooter', { static: false }]
        }], closeIcon: [{
            type: core.ViewChild,
            args: ['closeIcon', { static: false }]
        }] }); })();
        return ModalComponent;
    }());
    ModalComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ModalComponent.propDecorators = {
        scrollTopEnable: [{ type: core.Input }],
        maximizable: [{ type: core.Input }],
        backdrop: [{ type: core.Input }],
        inViewport: [{ type: core.Input }],
        closeModal: [{ type: core.Output }],
        modalRoot: [{ type: core.ViewChild, args: ['modalRoot', { static: false },] }],
        modalBody: [{ type: core.ViewChild, args: ['modalBody', { static: false },] }],
        modalHeader: [{ type: core.ViewChild, args: ['modalHeader', { static: false },] }],
        modalFooter: [{ type: core.ViewChild, args: ['modalFooter', { static: false },] }],
        closeIcon: [{ type: core.ViewChild, args: ['closeIcon', { static: false },] }],
        onKeyDown: [{ type: core.HostListener, args: ['keydown.esc', ['$event'],] }],
        onWindowResize: [{ type: core.HostListener, args: ['window:resize',] }]
    };

    var ResizableDirective = /** @class */ (function () {
        function ResizableDirective(element) {
            this.resizeBegin = new core.EventEmitter();
            this.resizing = new core.EventEmitter();
            this.resizeEnd = new core.EventEmitter();
            this.element = element.nativeElement;
        }
        ResizableDirective.prototype.ngAfterViewInit = function () {
            if (this.south) {
                this.createHandle('resize-handle-s');
            }
            if (this.east) {
                this.createHandle('resize-handle-e');
            }
            if (this.southEast) {
                this.createHandle('resize-handle-se');
            }
            if (this.southWest) {
                this.createHandle('resize-handle-sw');
            }
            if (this.west) {
                this.createHandle('resize-handle-w');
            }
            if (this.northWest) {
                this.createHandle('resize-handle-nw');
            }
            if (this.north) {
                this.createHandle('resize-handle-n');
            }
            if (this.northEast) {
                this.createHandle('resize-handle-ne');
            }
            var computedStyle = window.getComputedStyle(this.element);
            this.minWidth = parseFloat(computedStyle.minWidth);
            this.maxWidth = parseFloat(computedStyle.maxWidth);
            this.minHeight = parseFloat(computedStyle.minHeight);
            this.maxHeight = parseFloat(computedStyle.maxHeight);
        };
        ResizableDirective.prototype.ngOnDestroy = function () {
            this.destroySubscription();
        };
        ResizableDirective.prototype.onMousedown = function (event) {
            var _this = this;
            if (!isLeftButton(event)) {
                return;
            }
            var classList = (event.target).classList;
            var isSouth = classList.contains('resize-handle-s');
            var isEast = classList.contains('resize-handle-e');
            var isSouthEast = classList.contains('resize-handle-se');
            var isSouthWest = classList.contains('resize-handle-sw');
            var isWest = classList.contains('resize-handle-w');
            var isNorthWest = classList.contains('resize-handle-nw');
            var isNorth = classList.contains('resize-handle-n');
            var isNorthEast = classList.contains('resize-handle-ne');
            var evt = getEvent(event);
            var width = this.element.clientWidth;
            var height = this.element.clientHeight;
            var left = this.element.offsetLeft;
            var top = this.element.offsetTop;
            var screenX = evt.screenX;
            var screenY = evt.screenY;
            var isTouchEvent = event.type.startsWith('touch');
            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';
            if (isSouth || isEast || isSouthEast || isSouthWest || isWest || isNorthWest || isNorth || isNorthEast) {
                this.initResize(event, isSouth, isEast, isSouthEast, isSouthWest, isWest, isNorthWest, isNorth, isNorthEast);
                var mouseup = rxjs.fromEvent(document, upEvent);
                this.subscription = mouseup
                    .subscribe(function (ev) { return _this.onMouseup(ev); });
                var mouseMoveSub = rxjs.fromEvent(document, moveEvent)
                    .pipe(operators.takeUntil(mouseup))
                    .subscribe(function (e) { return _this.move(e, width, height, top, left, screenX, screenY); });
                this.subscription.add(mouseMoveSub);
            }
        };
        ResizableDirective.prototype.move = function (event, width, height, top, left, screenX, screenY) {
            var evt = getEvent(event);
            var movementX = evt.screenX - screenX;
            var movementY = evt.screenY - screenY;
            this.newWidth = width - (this.resizingSW || this.resizingW || this.resizingNW ? movementX : -movementX);
            this.newHeight = height - (this.resizingNW || this.resizingN || this.resizingNE ? movementY : -movementY);
            this.newLeft = left + movementX;
            this.newTop = top + movementY;
            this.resizeWidth(evt);
            this.resizeHeight(evt);
        };
        ResizableDirective.prototype.onMouseup = function (event) {
            this.endResize(event);
            this.destroySubscription();
        };
        ResizableDirective.prototype.destroySubscription = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = undefined;
            }
        };
        ResizableDirective.prototype.createHandle = function (edgeClass) {
            var node = document.createElement('span');
            node.className = edgeClass;
            this.element.appendChild(node);
        };
        ResizableDirective.prototype.initResize = function (event, isSouth, isEast, isSouthEast, isSouthWest, isWest, isNorthWest, isNorth, isNorthEast) {
            if (isSouth) {
                this.resizingS = true;
            }
            if (isEast) {
                this.resizingE = true;
            }
            if (isSouthEast) {
                this.resizingSE = true;
            }
            if (isSouthWest) {
                this.resizingSW = true;
            }
            if (isWest) {
                this.resizingW = true;
            }
            if (isNorthWest) {
                this.resizingNW = true;
            }
            if (isNorth) {
                this.resizingN = true;
            }
            if (isNorthEast) {
                this.resizingNE = true;
            }
            this.element.classList.add('resizing');
            this.newWidth = this.element.clientWidth;
            this.newHeight = this.element.clientHeight;
            this.newLeft = this.element.offsetLeft;
            this.newTop = this.element.offsetTop;
            event.stopPropagation();
            this.resizeBegin.emit();
        };
        ResizableDirective.prototype.endResize = function (event) {
            this.resizingS = false;
            this.resizingE = false;
            this.resizingSE = false;
            this.resizingSW = false;
            this.resizingW = false;
            this.resizingNW = false;
            this.resizingN = false;
            this.resizingNE = false;
            this.element.classList.remove('resizing');
            this.resizeEnd.emit({ event: getEvent(event), width: this.newWidth, height: this.newHeight });
        };
        ResizableDirective.prototype.resizeWidth = function (event) {
            var overMinWidth = !this.minWidth || this.newWidth >= this.minWidth;
            var underMaxWidth = !this.maxWidth || this.newWidth <= this.maxWidth;
            if (this.resizingSE || this.resizingE || this.resizingNE) {
                if (overMinWidth && underMaxWidth) {
                    if (!this.ghost) {
                        this.element.style.width = this.newWidth + "px";
                    }
                }
            }
            if (this.resizingSW || this.resizingW || this.resizingNW) {
                if (overMinWidth && underMaxWidth) {
                    this.element.style.left = this.newLeft + "px";
                    this.element.style.width = this.newWidth + "px";
                }
            }
            this.resizing.emit({ event: event, width: this.newWidth, height: this.newHeight, direction: 'horizontal' });
        };
        ResizableDirective.prototype.resizeHeight = function (event) {
            var overMinHeight = !this.minHeight || this.newHeight >= this.minHeight;
            var underMaxHeight = !this.maxHeight || this.newHeight <= this.maxHeight;
            if (this.resizingSE || this.resizingS || this.resizingSW) {
                if (overMinHeight && underMaxHeight) {
                    if (!this.ghost) {
                        this.element.style.height = this.newHeight + "px";
                    }
                }
            }
            if (this.resizingNW || this.resizingN || this.resizingNE) {
                if (overMinHeight && underMaxHeight) {
                    if (!this.ghost) {
                        this.element.style.top = this.newTop + "px";
                        this.element.style.height = this.newHeight + "px";
                    }
                }
            }
            this.resizing.emit({ event: event, width: this.newWidth, height: this.newHeight, direction: 'vertical' });
        };
ResizableDirective.ɵfac = function ResizableDirective_Factory(t) { return new (t || ResizableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ResizableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizableDirective, selectors: [["", "appResizable", ""]], hostBindings: function ResizableDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function ResizableDirective_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); })("touchstart", function ResizableDirective_touchstart_HostBindingHandler($event) { return ctx.onMousedown($event); });
    } }, inputs: { south: "south", east: "east", southEast: "southEast", ghost: "ghost", southWest: "southWest", west: "west", northWest: "northWest", north: "north", northEast: "northEast" }, outputs: { resizeBegin: "resizeBegin", resizing: "resizing", resizeEnd: "resizeEnd" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizableDirective, [{
        type: core.Directive,
        args: [{
                selector: '[appResizable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resizeBegin: [{
            type: core.Output
        }], resizing: [{
            type: core.Output
        }], resizeEnd: [{
            type: core.Output
        }], onMousedown: [{
            type: core.HostListener,
            args: ['mousedown', ['$event']]
        }, {
            type: core.HostListener,
            args: ['touchstart', ['$event']]
        }], south: [{
            type: core.Input
        }], east: [{
            type: core.Input
        }], southEast: [{
            type: core.Input
        }], ghost: [{
            type: core.Input
        }], southWest: [{
            type: core.Input
        }], west: [{
            type: core.Input
        }], northWest: [{
            type: core.Input
        }], north: [{
            type: core.Input
        }], northEast: [{
            type: core.Input
        }] }); })();
        return ResizableDirective;
    }());
    ResizableDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ResizableDirective.propDecorators = {
        south: [{ type: core.Input }],
        east: [{ type: core.Input }],
        southEast: [{ type: core.Input }],
        ghost: [{ type: core.Input }],
        southWest: [{ type: core.Input }],
        west: [{ type: core.Input }],
        northWest: [{ type: core.Input }],
        north: [{ type: core.Input }],
        northEast: [{ type: core.Input }],
        resizeBegin: [{ type: core.Output }],
        resizing: [{ type: core.Output }],
        resizeEnd: [{ type: core.Output }],
        onMousedown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }, { type: core.HostListener, args: ['touchstart', ['$event'],] }]
    };

    var ResizableModule = /** @class */ (function () {
        function ResizableModule() {
        }
ResizableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ResizableModule });
ResizableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ResizableModule_Factory(t) { return new (t || ResizableModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ResizableModule, { declarations: [ResizableDirective], exports: [ResizableDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizableModule, [{
        type: core.NgModule,
        args: [{
                declarations: [
                    ResizableDirective,
                ],
                exports: [
                    ResizableDirective,
                ]
            }]
    }], function () { return []; }, null); })();
        return ResizableModule;
    }());

    var DraggableDirective = /** @class */ (function () {
        function DraggableDirective(element, ngZone) {
            this.element = element;
            this.ngZone = ngZone;
            this.dragX = true;
            this.dragY = true;
            this.dragStart = new core.EventEmitter();
            this.dragMove = new core.EventEmitter();
            this.dragEnd = new core.EventEmitter();
            this.globalListeners = new Map();
        }
        DraggableDirective.prototype.ngOnChanges = function (changes) {
            if (changes.dragEventTarget && changes.dragEventTarget.currentValue) {
                this.onMousedown(this.dragEventTarget);
            }
        };
        DraggableDirective.prototype.ngOnDestroy = function () {
            this.removeEventListener();
        };
        DraggableDirective.prototype.onMousedown = function (event) {
            if (!isLeftButton(event)) {
                return;
            }
            if (this.dragX || this.dragY) {
                var evt = getEvent(event);
                this.initDrag(evt.pageX, evt.pageY);
                this.addEventListeners(event);
                this.dragStart.emit(event);
            }
        };
        DraggableDirective.prototype.onMousemove = function (event) {
            var evt = getEvent(event);
            this.onDrag(evt.pageX, evt.pageY);
            this.dragMove.emit(event);
        };
        DraggableDirective.prototype.onMouseup = function (event) {
            this.endDrag();
            this.removeEventListener();
            this.dragEnd.emit(event);
        };
        DraggableDirective.prototype.addEventListeners = function (event) {
            var _this = this;
            var isTouchEvent = event.type.startsWith('touch');
            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';
            this.globalListeners
                .set(moveEvent, {
                handler: this.onMousemove.bind(this),
                options: false
            })
                .set(upEvent, {
                handler: this.onMouseup.bind(this),
                options: false
            });
            this.ngZone.runOutsideAngular(function () {
                _this.globalListeners.forEach(function (config, name) {
                    window.document.addEventListener(name, config.handler, config.options);
                });
            });
        };
        DraggableDirective.prototype.removeEventListener = function () {
            this.globalListeners.forEach(function (config, name) {
                window.document.removeEventListener(name, config.handler, config.options);
            });
        };
        DraggableDirective.prototype.initDrag = function (pageX, pageY) {
            this.isDragging = true;
            this.lastPageX = pageX;
            this.lastPageY = pageY;
            this.element.nativeElement.classList.add('dragging');
            this.elementWidth = this.element.nativeElement.offsetWidth;
            this.elementHeight = this.element.nativeElement.offsetHeight;
            this.vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
            this.vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
        };
        DraggableDirective.prototype.onDrag = function (pageX, pageY) {
            if (this.isDragging) {
                var deltaX = pageX - this.lastPageX;
                var deltaY = pageY - this.lastPageY;
                var coords = this.element.nativeElement.getBoundingClientRect();
                var leftPos = coords.left + deltaX;
                var topPos = coords.top + deltaY;
                var overWidth = !this.inViewport || leftPos >= 0 && (leftPos + this.elementWidth) <= this.vw;
                var overHeight = !this.inViewport || topPos >= 0 && (topPos + this.elementHeight) <= this.vh;
                if (overWidth) {
                    this.lastPageX = pageX;
                }
                if (overHeight) {
                    this.lastPageY = pageY;
                }
                if (this.inViewport) {
                    if (leftPos < 0) {
                        leftPos = 0;
                    }
                    if ((leftPos + this.elementWidth) > this.vw) {
                        leftPos = this.vw - this.elementWidth;
                    }
                    if (topPos < 0) {
                        topPos = 0;
                    }
                    if ((topPos + this.elementHeight) > this.vh) {
                        topPos = this.vh - this.elementHeight;
                    }
                }
                this.element.nativeElement.style.left = leftPos + 'px';
                this.element.nativeElement.style.top = topPos + 'px';
            }
        };
        DraggableDirective.prototype.endDrag = function () {
            this.isDragging = false;
            this.element.nativeElement.classList.remove('dragging');
        };
DraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [["", "appDraggable", ""]], inputs: { dragX: "dragX", dragY: "dragY", dragEventTarget: "dragEventTarget", inViewport: "inViewport" }, outputs: { dragStart: "dragStart", dragMove: "dragMove", dragEnd: "dragEnd" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableDirective, [{
        type: core.Directive,
        args: [{
                selector: '[appDraggable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { dragX: [{
            type: core.Input
        }], dragY: [{
            type: core.Input
        }], dragStart: [{
            type: core.Output
        }], dragMove: [{
            type: core.Output
        }], dragEnd: [{
            type: core.Output
        }], dragEventTarget: [{
            type: core.Input
        }], inViewport: [{
            type: core.Input
        }] }); })();
        return DraggableDirective;
    }());
    DraggableDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    DraggableDirective.propDecorators = {
        dragEventTarget: [{ type: core.Input }],
        dragX: [{ type: core.Input }],
        dragY: [{ type: core.Input }],
        inViewport: [{ type: core.Input }],
        dragStart: [{ type: core.Output }],
        dragMove: [{ type: core.Output }],
        dragEnd: [{ type: core.Output }]
    };

    var DraggableModule = /** @class */ (function () {
        function DraggableModule() {
        }
DraggableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DraggableModule });
DraggableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DraggableModule_Factory(t) { return new (t || DraggableModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DraggableModule, { declarations: [DraggableDirective], exports: [DraggableDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableModule, [{
        type: core.NgModule,
        args: [{
                declarations: [
                    DraggableDirective,
                ],
                exports: [
                    DraggableDirective,
                ]
            }]
    }], function () { return []; }, null); })();
        return DraggableModule;
    }());

    var ModalModule = /** @class */ (function () {
        function ModalModule() {
        }
ModalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ModalModule });
ModalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ModalModule_Factory(t) { return new (t || ModalModule)(); }, imports: [[
            common.CommonModule,
            ResizableModule,
            DraggableModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ModalModule, { declarations: [ModalComponent], imports: [ɵngcc1.CommonModule, ResizableModule, DraggableModule], exports: [ModalComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    ResizableModule,
                    DraggableModule,
                ],
                declarations: [
                    ModalComponent,
                ],
                exports: [
                    ModalComponent,
                ]
            }]
    }], function () { return []; }, null); })();
        return ModalModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ModalComponent = ModalComponent;
    exports.ModalModule = ModalModule;
    exports.ɵa = ResizableModule;
    exports.ɵb = ResizableDirective;
    exports.ɵc = DraggableModule;
    exports.ɵd = DraggableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-modal-lib.umd.js.map