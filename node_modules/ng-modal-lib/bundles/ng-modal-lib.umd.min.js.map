{"version":3,"sources":["../esm2015/projects/ng-modal-lib/src/lib/common/utils/dom-utils.ts","../projects/ng-modal-lib/src/lib/modal/modal.component.ts","../projects/ng-modal-lib/src/lib/resizable/resizable.directive.ts","../projects/ng-modal-lib/src/lib/resizable/resizable-module.ts","../projects/ng-modal-lib/src/lib/draggable/draggable.directive.ts","../projects/ng-modal-lib/src/lib/draggable/draggable-module.ts","../projects/ng-modal-lib/src/lib/modal/modal-module.ts"],"names":["isLeftButton","event","type","button","getEvent","changedTouches","startsWith","targetTouches","ModalComponent","element","this","scrollTopEnable","backdrop","closeModal","EventEmitter","prototype","ngAfterViewChecked","executePostDisplayActions","center","onKeyDown","preventDefault","stopPropagation","hide","onWindowResize","show","_this","visible","setTimeout","modalRoot","nativeElement","focus","modalBody","scrollTop","emit","focusLastModal","elementWidth","offsetWidth","elementHeight","offsetHeight","style","visibility","display","x","Math","max","window","innerWidth","y","innerHeight","left","top","initDrag","target","closeIcon","maximized","dragEventTarget","onResize","direction","calcBodyHeight","diffHeight","modalHeader","modalFooter","contentHeight","height","maxHeight","getMaxModalIndex","selectors","Array","from","document","querySelectorAll","map","a","parseFloat","getComputedStyle","zIndex","filter","isNaN","sort","b","pop","modal","el","closest","matches","parentElement","findAncestor","toggleMaximize","revertMaximize","maximize","preMaximizePageX","preMaximizePageY","preMaximizeRootWidth","preMaximizeRootHeight","preMaximizeBodyHeight","width","moveOnTop","maxModalIndex","toString","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Input","Output","ViewChild","static","HostListener","ResizableDirective","resizeBegin","resizing","resizeEnd","ngAfterViewInit","south","createHandle","east","southEast","southWest","west","northWest","north","northEast","computedStyle","minWidth","maxWidth","minHeight","ngOnDestroy","destroySubscription","onMousedown","classList","isSouth","contains","isEast","isSouthEast","isSouthWest","isWest","isNorthWest","isNorth","isNorthEast","evt","clientWidth","clientHeight","offsetLeft","offsetTop","screenX","screenY","isTouchEvent","moveEvent","upEvent","initResize","mouseup","fromEvent","subscription","subscribe","ev","onMouseup","mouseMoveSub","pipe","takeUntil","e","move","add","movementX","movementY","newWidth","resizingSW","resizingW","resizingNW","newHeight","resizingN","resizingNE","newLeft","newTop","resizeWidth","resizeHeight","endResize","unsubscribe","undefined","edgeClass","node","createElement","className","appendChild","resizingS","resizingE","resizingSE","remove","overMinWidth","underMaxWidth","ghost","overMinHeight","underMaxHeight","Directive","NgModule","declarations","exports","DraggableDirective","ngZone","dragX","dragY","dragStart","dragMove","dragEnd","globalListeners","Map","ngOnChanges","changes","currentValue","removeEventListener","pageX","pageY","addEventListeners","onMousemove","onDrag","endDrag","set","handler","bind","options","runOutsideAngular","forEach","config","name","addEventListener","isDragging","lastPageX","lastPageY","vw","documentElement","vh","deltaX","deltaY","coords","getBoundingClientRect","leftPos","topPos","overWidth","inViewport","overHeight","NgZone","imports","CommonModule","ResizableModule","DraggableModule"],"mappings":"6dAAgBA,EAAaC,GAC3B,MAAmB,eAAfA,EAAMC,MAGa,cAAfD,EAAMC,MAAyD,IAAhCD,EAAqBE,gBAG9CC,EAASH,GACvB,MAAmB,aAAfA,EAAMC,MAAsC,gBAAfD,EAAMC,KAC7BD,EAAqBI,eAAe,GAEvCJ,EAAMC,KAAKI,WAAW,SAAYL,EAAqBM,cAAc,GAAKN,mBC0BjF,SAAAO,EAAoBC,GAAAC,KAAAD,QAAAA,EAvBXC,KAAAC,iBAAkB,EAElBD,KAAAE,UAAW,EAGVF,KAAAG,WAAoC,IAAIC,EAAAA,oBAoBlDN,EAAAO,UAAAC,mBAAA,WACMN,KAAKO,4BACPP,KAAKQ,SACLR,KAAKO,2BAA4B,IAKrCT,EAAAO,UAAAI,UAAA,SAAUlB,GACRA,EAAMmB,iBACNnB,EAAMoB,kBACNX,KAAKY,QAIPd,EAAAO,UAAAQ,eAAA,WACEb,KAAKO,2BAA4B,EACjCP,KAAKQ,UAGPV,EAAAO,UAAAS,KAAA,WAAA,IAAAC,EAAAf,KACEA,KAAKO,2BAA4B,EACjCP,KAAKgB,SAAU,EACfC,YAAW,WACTF,EAAKG,UAAUC,cAAcC,QACzBL,EAAKd,kBACPc,EAAKM,UAAUF,cAAcG,UAAY,KAE1C,IAGLxB,EAAAO,UAAAO,KAAA,WACEZ,KAAKgB,SAAU,EACfhB,KAAKG,WAAWoB,MAAK,GACrBvB,KAAKwB,kBAGP1B,EAAAO,UAAAG,OAAA,WACE,IAAIiB,EAAezB,KAAKkB,UAAUC,cAAcO,YAC5CC,EAAgB3B,KAAKkB,UAAUC,cAAcS,aAE5B,IAAjBH,GAAwC,IAAlBE,IACxB3B,KAAKkB,UAAUC,cAAcU,MAAMC,WAAa,SAChD9B,KAAKkB,UAAUC,cAAcU,MAAME,QAAU,QAC7CN,EAAezB,KAAKkB,UAAUC,cAAcO,YAC5CC,EAAgB3B,KAAKkB,UAAUC,cAAcS,aAC7C5B,KAAKkB,UAAUC,cAAcU,MAAME,QAAU,OAC7C/B,KAAKkB,UAAUC,cAAcU,MAAMC,WAAa,WAGlD,IAAME,EAAIC,KAAKC,KAAKC,OAAOC,WAAaX,GAAgB,EAAG,GACrDY,EAAIJ,KAAKC,KAAKC,OAAOG,YAAcX,GAAiB,EAAG,GAE7D3B,KAAKkB,UAAUC,cAAcU,MAAMU,KAAOP,EAAI,KAC9ChC,KAAKkB,UAAUC,cAAcU,MAAMW,IAAMH,EAAI,MAG/CvC,EAAAO,UAAAoC,SAAA,SAASlD,GACHA,EAAMmD,SAAW1C,KAAK2C,UAAUxB,gBAG/BnB,KAAK4C,YACR5C,KAAK6C,gBAAkBtD,KAI3BO,EAAAO,UAAAyC,SAAA,SAASvD,GACiB,aAApBA,EAAMwD,WACR/C,KAAKgD,kBAITlD,EAAAO,UAAA2C,eAAA,WACE,IAAMC,EAAajD,KAAKkD,YAAY/B,cAAcS,aAAe5B,KAAKmD,YAAYhC,cAAcS,aAC1FwB,EAAgBpD,KAAKkB,UAAUC,cAAcS,aAAeqB,EAClEjD,KAAKqB,UAAUF,cAAcU,MAAMwB,OAASD,EAAgB,KAC5DpD,KAAKqB,UAAUF,cAAcU,MAAMyB,UAAY,QAGjDxD,EAAAO,UAAAkD,iBAAA,WACE,YDzGsB,KAAAC,ECyGL,eDzGKA,EAAA,UACjBC,MAAMC,KAAKC,SAASC,iBAAiBJ,IACzCK,KAAI,SAAAC,GAAK,OAAAC,WAAW5B,OAAO6B,iBAAiBF,GAAGG,WAC/CC,QAAO,SAAAJ,GAAK,OAACK,MAAML,MACnBM,MAAK,SAACN,EAAGO,GAAM,OAAAP,EAAIO,KACnBC,OAAS,MALYd,GC4GxB1D,EAAAO,UAAAmB,eAAA,WACE,IAAM+C,WDrGmBC,EAAIhB,GAC/B,GAA0B,mBAAfgB,EAAGC,QACV,OAAOD,EAAGC,QAAQjB,IAAc,KAEpC,KAAOgB,GAAI,CACT,GAAIA,EAAGE,QAAQlB,GACb,OAAOgB,EAETA,EAAKA,EAAGG,cAEV,OAAO,KC2FSC,CAAa5E,KAAKD,QAAQoB,cAAcwD,cAAe,aACjEJ,GACFA,EAAMnD,SAIVtB,EAAAO,UAAAwE,eAAA,SAAetF,GACTS,KAAK4C,UACP5C,KAAK8E,iBAEL9E,KAAK+E,WAEPxF,EAAMmB,kBAGRZ,EAAAO,UAAA0E,SAAA,WACE/E,KAAKgF,iBAAmBjB,WAAW/D,KAAKkB,UAAUC,cAAcU,MAAMW,KACtExC,KAAKiF,iBAAmBlB,WAAW/D,KAAKkB,UAAUC,cAAcU,MAAMU,MACtEvC,KAAKkF,qBAAuBlF,KAAKkB,UAAUC,cAAcO,YACzD1B,KAAKmF,sBAAwBnF,KAAKkB,UAAUC,cAAcS,aAC1D5B,KAAKoF,sBAAwBpF,KAAKqB,UAAUF,cAAcS,aAE1D5B,KAAKkB,UAAUC,cAAcU,MAAMW,IAAM,MACzCxC,KAAKkB,UAAUC,cAAcU,MAAMU,KAAO,MAC1CvC,KAAKkB,UAAUC,cAAcU,MAAMwD,MAAQ,QAC3CrF,KAAKkB,UAAUC,cAAcU,MAAMwB,OAAS,QAC5C,IAAMJ,EAAajD,KAAKkD,YAAY/B,cAAcS,aAAe5B,KAAKmD,YAAYhC,cAAcS,aAChG5B,KAAKqB,UAAUF,cAAcU,MAAMwB,OAAS,gBAAkBJ,EAAa,MAC3EjD,KAAKqB,UAAUF,cAAcU,MAAMyB,UAAY,OAE/CtD,KAAK4C,WAAY,GAGnB9C,EAAAO,UAAAyE,eAAA,WACI9E,KAAKkB,UAAUC,cAAcU,MAAMW,IAAMxC,KAAKgF,iBAAmB,KACjEhF,KAAKkB,UAAUC,cAAcU,MAAMU,KAAOvC,KAAKiF,iBAAmB,KAClEjF,KAAKkB,UAAUC,cAAcU,MAAMwD,MAAQrF,KAAKkF,qBAAuB,KACvElF,KAAKkB,UAAUC,cAAcU,MAAMwB,OAASrD,KAAKmF,sBAAwB,KACzEnF,KAAKqB,UAAUF,cAAcU,MAAMwB,OAASrD,KAAKoF,sBAAwB,KAEzEpF,KAAK4C,WAAY,GAGrB9C,EAAAO,UAAAiF,UAAA,WACE,IAAKtF,KAAKE,SAAU,CAClB,IAAMqF,EAAgBvF,KAAKuD,mBACvBU,EAASF,WAAW5B,OAAO6B,iBAAiBhE,KAAKkB,UAAUC,eAAe8C,SAAW,EACrFA,GAAUsB,IACZtB,EAASsB,EAAgB,EACzBvF,KAAKkB,UAAUC,cAAcU,MAAMoC,OAASA,EAAOuB,uCAtK1DC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,48CAEAC,cAAeC,EAAAA,kBAAkBC,q6FATtBC,EAAAA,uDAaVC,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,0BAEAC,EAAAA,0BAEAC,EAAAA,UAAST,KAAA,CAAC,YAAa,CAACU,QAAQ,uBAChCD,EAAAA,UAAST,KAAA,CAAC,YAAa,CAACU,QAAQ,yBAChCD,EAAAA,UAAST,KAAA,CAAC,cAAe,CAACU,QAAQ,yBAClCD,EAAAA,UAAST,KAAA,CAAC,cAAe,CAACU,QAAQ,uBAClCD,EAAAA,UAAST,KAAA,CAAC,YAAa,CAACU,QAAQ,uBAqBhCC,EAAAA,aAAYX,KAAA,CAAC,cAAe,CAAC,mCAO7BW,EAAAA,aAAYX,KAAA,CAAC,qCCNd,SAAAY,EAAYvG,GAxBFC,KAAAuG,YAAiC,IAAInG,EAAAA,aACrCJ,KAAAwG,SAAyC,IAAIpG,EAAAA,aAC7CJ,KAAAyG,UAA0C,IAAIrG,EAAAA,aAuBtDJ,KAAKD,QAAUA,EAAQoB,qBAGzBmF,EAAAjG,UAAAqG,gBAAA,WACM1G,KAAK2G,OACP3G,KAAK4G,aAAa,mBAEhB5G,KAAK6G,MACP7G,KAAK4G,aAAa,mBAEhB5G,KAAK8G,WACP9G,KAAK4G,aAAa,oBAEhB5G,KAAK+G,WACP/G,KAAK4G,aAAa,oBAEhB5G,KAAKgH,MACPhH,KAAK4G,aAAa,mBAEhB5G,KAAKiH,WACPjH,KAAK4G,aAAa,oBAEhB5G,KAAKkH,OACPlH,KAAK4G,aAAa,mBAEhB5G,KAAKmH,WACPnH,KAAK4G,aAAa,oBAEpB,IAAMQ,EAAgBjF,OAAO6B,iBAAiBhE,KAAKD,SACnDC,KAAKqH,SAAWtD,WAAWqD,EAAcC,UACzCrH,KAAKsH,SAAWvD,WAAWqD,EAAcE,UACzCtH,KAAKuH,UAAYxD,WAAWqD,EAAcG,WAC1CvH,KAAKsD,UAAYS,WAAWqD,EAAc9D,YAG5CgD,EAAAjG,UAAAmH,YAAA,WACExH,KAAKyH,uBAKPnB,EAAAjG,UAAAqH,YAAA,SAAYnI,GAAZ,IAAAwB,EAAAf,KACE,GAAKV,EAAaC,GAAlB,CAGA,IAAMoI,EAAcpI,EAAY,OAAkBoI,UAC5CC,EAAUD,EAAUE,SAAS,mBAC7BC,EAASH,EAAUE,SAAS,mBAC5BE,EAAcJ,EAAUE,SAAS,oBACjCG,EAAcL,EAAUE,SAAS,oBACjCI,EAASN,EAAUE,SAAS,mBAC5BK,EAAcP,EAAUE,SAAS,oBACjCM,EAAUR,EAAUE,SAAS,mBAC7BO,EAAcT,EAAUE,SAAS,oBAEjCQ,EAAM3I,EAASH,GACf8F,EAAQrF,KAAKD,QAAQuI,YACrBjF,EAASrD,KAAKD,QAAQwI,aACtBhG,EAAOvC,KAAKD,QAAQyI,WACpBhG,EAAMxC,KAAKD,QAAQ0I,UACnBC,EAAUL,EAAIK,QACdC,EAAUN,EAAIM,QAEdC,EAAerJ,EAAMC,KAAKI,WAAW,SACrCiJ,EAAYD,EAAe,YAAc,YACzCE,EAAUF,EAAe,WAAa,UAE5C,GAAIhB,GAAWE,GAAUC,GAAeC,GAAeC,GAAUC,GAAeC,GAAWC,EAAa,CACtGpI,KAAK+I,WAAWxJ,EAAOqI,EAASE,EAAQC,EAAaC,EAAaC,EAAQC,EAAaC,EAASC,GAEhG,IAAMY,EAAUC,EAAAA,UAAUtF,SAAUmF,GACpC9I,KAAKkJ,aAAeF,EACjBG,WAAU,SAACC,GAAgC,OAAArI,EAAKsI,UAAUD,MAE7D,IAAME,EAAeL,EAAAA,UAAUtF,SAAUkF,GACtCU,KAAKC,EAAAA,UAAUR,IACfG,WAAU,SAACM,GAA+B,OAAA1I,EAAK2I,KAAKD,EAAGpE,EAAOhC,EAAQb,EAAKD,EAAMmG,EAASC,MAE7F3I,KAAKkJ,aAAaS,IAAIL,MAI1BhD,EAAAjG,UAAAqJ,KAAA,SAAKnK,EAAgC8F,EAAehC,EAAgBb,EAAaD,EAAcmG,EAAiBC,GAC9G,IAAMN,EAAM3I,EAASH,GACfqK,EAAYvB,EAAIK,QAAUA,EAC1BmB,EAAYxB,EAAIM,QAAUA,EAEhC3I,KAAK8J,SAAWzE,GAASrF,KAAK+J,YAAc/J,KAAKgK,WAAahK,KAAKiK,WAAaL,GAAaA,GAC7F5J,KAAKkK,UAAY7G,GAAUrD,KAAKiK,YAAcjK,KAAKmK,WAAanK,KAAKoK,WAAaP,GAAaA,GAC/F7J,KAAKqK,QAAU9H,EAAOqH,EACtB5J,KAAKsK,OAAS9H,EAAMqH,EAEpB7J,KAAKuK,YAAYlC,GACjBrI,KAAKwK,aAAanC,IAGpB/B,EAAAjG,UAAAgJ,UAAA,SAAU9J,GACRS,KAAKyK,UAAUlL,GACfS,KAAKyH,uBAGCnB,EAAAjG,UAAAoH,oBAAA,WACFzH,KAAKkJ,eACPlJ,KAAKkJ,aAAawB,cAClB1K,KAAKkJ,kBAAeyB,IAIhBrE,EAAAjG,UAAAuG,aAAA,SAAagE,GACnB,IAAMC,EAAOlH,SAASmH,cAAc,QACpCD,EAAKE,UAAYH,EACjB5K,KAAKD,QAAQiL,YAAYH,IAG3BvE,EAAAjG,UAAA0I,WAAA,SAAWxJ,EACTqI,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACIR,IACF5H,KAAKiL,WAAY,GAEfnD,IACF9H,KAAKkL,WAAY,GAEfnD,IACF/H,KAAKmL,YAAa,GAEhBnD,IACFhI,KAAK+J,YAAa,GAGhB9B,IACFjI,KAAKgK,WAAY,GAGf9B,IACFlI,KAAKiK,YAAa,GAGhB9B,IACFnI,KAAKmK,WAAY,GAGf/B,IACFpI,KAAKoK,YAAa,GAEpBpK,KAAKD,QAAQ4H,UAAUgC,IAAI,YAC3B3J,KAAK8J,SAAW9J,KAAKD,QAAQuI,YAC7BtI,KAAKkK,UAAYlK,KAAKD,QAAQwI,aAC9BvI,KAAKqK,QAAUrK,KAAKD,QAAQyI,WAC5BxI,KAAKsK,OAAStK,KAAKD,QAAQ0I,UAC3BlJ,EAAMoB,kBACNX,KAAKuG,YAAYhF,QAGnB+E,EAAAjG,UAAAoK,UAAA,SAAUlL,GACRS,KAAKiL,WAAY,EACjBjL,KAAKkL,WAAY,EACjBlL,KAAKmL,YAAa,EAClBnL,KAAK+J,YAAa,EAClB/J,KAAKgK,WAAY,EACjBhK,KAAKiK,YAAa,EAClBjK,KAAKmK,WAAY,EACjBnK,KAAKoK,YAAa,EAClBpK,KAAKD,QAAQ4H,UAAUyD,OAAO,YAC9BpL,KAAKyG,UAAUlF,KAAK,CAAEhC,MAAOG,EAASH,GAAQ8F,MAAOrF,KAAK8J,SAAUzG,OAAQrD,KAAKkK,aAGnF5D,EAAAjG,UAAAkK,YAAA,SAAYhL,GACV,IAAM8L,GAAgBrL,KAAKqH,UAAYrH,KAAK8J,UAAY9J,KAAKqH,SACvDiE,GAAiBtL,KAAKsH,UAAYtH,KAAK8J,UAAY9J,KAAKsH,UAE1DtH,KAAKmL,YAAcnL,KAAKkL,WAAalL,KAAKoK,aACxCiB,GAAgBC,IACbtL,KAAKuL,QACRvL,KAAKD,QAAQ8B,MAAMwD,MAAWrF,KAAK8J,SAAQ,QAI7C9J,KAAK+J,YAAc/J,KAAKgK,WAAahK,KAAKiK,aACxCoB,GAAgBC,IAClBtL,KAAKD,QAAQ8B,MAAMU,KAAUvC,KAAKqK,QAAO,KACzCrK,KAAKD,QAAQ8B,MAAMwD,MAAWrF,KAAK8J,SAAQ,MAG/C9J,KAAKwG,SAASjF,KAAK,CAAEhC,MAAKA,EAAE8F,MAAOrF,KAAK8J,SAAUzG,OAAQrD,KAAKkK,UAAWnH,UAAW,gBAIvFuD,EAAAjG,UAAAmK,aAAA,SAAajL,GACX,IAAMiM,GAAiBxL,KAAKuH,WAAavH,KAAKkK,WAAalK,KAAKuH,UAC1DkE,GAAkBzL,KAAKsD,WAAatD,KAAKkK,WAAalK,KAAKsD,WAC7DtD,KAAKmL,YAAcnL,KAAKiL,WAAajL,KAAK+J,aACxCyB,GAAiBC,IACdzL,KAAKuL,QACRvL,KAAKD,QAAQ8B,MAAMwB,OAAYrD,KAAKkK,UAAS,QAK/ClK,KAAKiK,YAAcjK,KAAKmK,WAAanK,KAAKoK,aACxCoB,GAAiBC,IACdzL,KAAKuL,QACRvL,KAAKD,QAAQ8B,MAAMW,IAASxC,KAAKsK,OAAM,KACvCtK,KAAKD,QAAQ8B,MAAMwB,OAAYrD,KAAKkK,UAAS,OAInDlK,KAAKwG,SAASjF,KAAK,CAAEhC,MAAKA,EAAE8F,MAAOrF,KAAK8J,SAAUzG,OAAQrD,KAAKkK,UAAWnH,UAAW,uCA7PxF2I,EAAAA,UAAShG,KAAA,CAAC,CACTC,SAAU,8DARCK,EAAAA,6CAYVC,EAAAA,oBACAA,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,oBACAA,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,2BAEAC,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,4BA8DAG,EAAAA,aAAYX,KAAA,CAAC,YAAa,CAAC,YAAS,CAAAlG,KACpC6G,EAAAA,aAAYX,KAAA,CAAC,aAAc,CAAC,oBC7E/B,iCARCiG,EAAAA,SAAQjG,KAAA,CAAC,CACRkG,aAAc,CACZtF,GAEFuF,QAAS,CACPvF,wBCuBF,SAAAwF,EAAoB/L,EAA6BgM,GAA7B/L,KAAAD,QAAAA,EAA6BC,KAAA+L,OAAAA,EApBxC/L,KAAAgM,OAAQ,EACRhM,KAAAiM,OAAQ,EAGPjM,KAAAkM,UAA+B,IAAI9L,EAAAA,aACnCJ,KAAAmM,SAA8B,IAAI/L,EAAAA,aAClCJ,KAAAoM,QAA6B,IAAIhM,EAAAA,aAKnCJ,KAAAqM,gBAAkB,IAAIC,WAY9BR,EAAAzL,UAAAkM,YAAA,SAAYC,GACNA,EAAQ3J,iBAAmB2J,EAAQ3J,gBAAgB4J,cACrDzM,KAAK0H,YAAY1H,KAAK6C,kBAI1BiJ,EAAAzL,UAAAmH,YAAA,WACExH,KAAK0M,uBAGPZ,EAAAzL,UAAAqH,YAAA,SAAYnI,GACV,GAAKD,EAAaC,KAGdS,KAAKgM,OAAShM,KAAKiM,OAAO,CAC5B,IAAM5D,EAAM3I,EAASH,GACrBS,KAAKyC,SAAS4F,EAAIsE,MAAOtE,EAAIuE,OAC7B5M,KAAK6M,kBAAkBtN,GACvBS,KAAKkM,UAAU3K,KAAKhC,KAIxBuM,EAAAzL,UAAAyM,YAAA,SAAYvN,GACV,IAAM8I,EAAM3I,EAASH,GACrBS,KAAK+M,OAAO1E,EAAIsE,MAAOtE,EAAIuE,OAC3B5M,KAAKmM,SAAS5K,KAAKhC,IAGrBuM,EAAAzL,UAAAgJ,UAAA,SAAU9J,GACRS,KAAKgN,UACLhN,KAAK0M,sBACL1M,KAAKoM,QAAQ7K,KAAKhC,IAGpBuM,EAAAzL,UAAAwM,kBAAA,SAAkBtN,GAAlB,IAAAwB,EAAAf,KACQ4I,EAAerJ,EAAMC,KAAKI,WAAW,SACrCiJ,EAAYD,EAAe,YAAc,YACzCE,EAAUF,EAAe,WAAa,UAE5C5I,KAAKqM,gBACJY,IAAIpE,EAAW,CACdqE,QAASlN,KAAK8M,YAAYK,KAAKnN,MAC/BoN,SAAS,IAEVH,IAAInE,EAAS,CACZoE,QAASlN,KAAKqJ,UAAU8D,KAAKnN,MAC7BoN,SAAS,IAGXpN,KAAK+L,OAAOsB,mBAAkB,WAC5BtM,EAAKsL,gBAAgBiB,SAAQ,SAACC,EAAQC,GACpCrL,OAAOwB,SAAS8J,iBAAiBD,EAAMD,EAAOL,QAASK,EAAOH,gBAKpEtB,EAAAzL,UAAAqM,oBAAA,WACE1M,KAAKqM,gBAAgBiB,SAAQ,SAACC,EAAQC,GACpCrL,OAAOwB,SAAS+I,oBAAoBc,EAAMD,EAAOL,QAASK,EAAOH,aAIrEtB,EAAAzL,UAAAoC,SAAA,SAASkK,EAAeC,GACpB5M,KAAK0N,YAAa,EAClB1N,KAAK2N,UAAYhB,EACjB3M,KAAK4N,UAAYhB,EACjB5M,KAAKD,QAAQoB,cAAcwG,UAAUgC,IAAI,YAEzC3J,KAAKyB,aAAezB,KAAKD,QAAQoB,cAAcO,YAC/C1B,KAAK2B,cAAgB3B,KAAKD,QAAQoB,cAAcS,aAChD5B,KAAK6N,GAAK5L,KAAKC,IAAIyB,SAASmK,gBAAgBxF,aAAe,EAAGnG,OAAOC,YAAc,GACnFpC,KAAK+N,GAAK9L,KAAKC,IAAIyB,SAASmK,gBAAgBvF,cAAgB,EAAGpG,OAAOG,aAAe,IAGzFwJ,EAAAzL,UAAA0M,OAAA,SAAOJ,EAAeC,GACpB,GAAI5M,KAAK0N,WAAY,CACnB,IAAMM,EAASrB,EAAQ3M,KAAK2N,UACtBM,EAASrB,EAAQ5M,KAAK4N,UACtBM,EAASlO,KAAKD,QAAQoB,cAAcgN,wBACtCC,EAAUF,EAAO3L,KAAOyL,EACxBK,EAASH,EAAO1L,IAAMyL,EAEpBK,GAAatO,KAAKuO,YAAcH,GAAW,GAAMA,EAAUpO,KAAKyB,cAAiBzB,KAAK6N,GACtFW,GAAcxO,KAAKuO,YAAcF,GAAU,GAAMA,EAASrO,KAAK2B,eAAkB3B,KAAK+N,GACxFO,IACFtO,KAAK2N,UAAYhB,GAEf6B,IACFxO,KAAK4N,UAAYhB,GAGf5M,KAAKuO,aACHH,EAAU,IACZA,EAAU,GAEPA,EAAUpO,KAAKyB,aAAgBzB,KAAK6N,KACvCO,EAAUpO,KAAK6N,GAAK7N,KAAKyB,cAEvB4M,EAAS,IACXA,EAAS,GAENA,EAASrO,KAAK2B,cAAiB3B,KAAK+N,KACvCM,EAASrO,KAAK+N,GAAK/N,KAAK2B,gBAG5B3B,KAAKD,QAAQoB,cAAcU,MAAMU,KAAO6L,EAAU,KAClDpO,KAAKD,QAAQoB,cAAcU,MAAMW,IAAM6L,EAAS,OAIpDvC,EAAAzL,UAAA2M,QAAA,WACEhN,KAAK0N,YAAa,EAClB1N,KAAKD,QAAQoB,cAAcwG,UAAUyD,OAAO,sCA7I/CM,EAAAA,UAAShG,KAAA,CAAC,CACTC,SAAU,8DALCK,EAAAA,kBAA8EyI,EAAAA,mDASxFxI,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,0BACAA,EAAAA,yBAEAC,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,gBCNH,iCARCyF,EAAAA,SAAQjG,KAAA,CAAC,CACRkG,aAAc,CACZE,GAEFD,QAAS,CACPC,aCWJ,iCAbCH,EAAAA,SAAQjG,KAAA,CAAC,CACRgJ,QAAS,CACPC,EAAAA,aACAC,EACAC,GAEFjD,aAAc,CACZ9L,GAEF+L,QAAS,CACP/L","sourcesContent":["export function isLeftButton(event: MouseEvent | TouchEvent): boolean {\n  if (event.type === 'touchstart') {\n    return true;\n  }\n  return (event.type === 'mousedown' && (event as MouseEvent).button === 0);\n}\n\nexport function getEvent(event: MouseEvent | TouchEvent): MouseEvent | Touch {\n  if (event.type === 'touchend' || event.type === 'touchcancel') {\n    return (event as TouchEvent).changedTouches[0];\n  }\n  return event.type.startsWith('touch') ? (event as TouchEvent).targetTouches[0] : event as MouseEvent;\n}\n\nexport function maxZIndex(selectors: string = 'body *'): number {\n  return Array.from(document.querySelectorAll(selectors))\n    .map(a => parseFloat(window.getComputedStyle(a).zIndex))\n    .filter(a => !isNaN(a))\n    .sort((a, b) => a - b)\n    .pop() || 0;\n}\n\nexport function findAncestor(el, selectors): any {\n  if (typeof el.closest === 'function') {\n      return el.closest(selectors) || null;\n  }\n  while (el) {\n    if (el.matches(selectors)) {\n      return el;\n    }\n    el = el.parentElement;\n  }\n  return null;\n}\n","import {\n  Component, ElementRef, ViewChild, Input, Output, AfterViewChecked, HostListener, EventEmitter, ViewEncapsulation\n} from '@angular/core';\nimport {ResizableEvent} from '../resizable/types';\nimport {maxZIndex, findAncestor} from '../common/utils';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal.component.html',\n  styleUrls: ['modal.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ModalComponent implements AfterViewChecked {\n\n  @Input() scrollTopEnable = true;\n  @Input() maximizable: boolean;\n  @Input() backdrop = true;\n  @Input() inViewport: boolean;\n\n  @Output() closeModal: EventEmitter<boolean> = new EventEmitter();\n\n  @ViewChild('modalRoot', {static: false}) modalRoot: ElementRef;\n  @ViewChild('modalBody', {static: false}) modalBody: ElementRef;\n  @ViewChild('modalHeader', {static: false}) modalHeader: ElementRef;\n  @ViewChild('modalFooter', {static: false}) modalFooter: ElementRef;\n  @ViewChild('closeIcon', {static: false}) closeIcon: ElementRef;\n\n  visible: boolean;\n  executePostDisplayActions: boolean;\n  maximized: boolean;\n  preMaximizeRootWidth: number;\n  preMaximizeRootHeight: number;\n  preMaximizeBodyHeight: number;\n  preMaximizePageX: number;\n  preMaximizePageY: number;\n  dragEventTarget: MouseEvent | TouchEvent;\n\n  constructor(private element: ElementRef) {}\n\n  ngAfterViewChecked(): void {\n    if (this.executePostDisplayActions) {\n      this.center();\n      this.executePostDisplayActions = false;\n    }\n  }\n\n  @HostListener('keydown.esc', ['$event'])\n  onKeyDown(event): void {\n    event.preventDefault();\n    event.stopPropagation();\n    this.hide();\n  }\n\n  @HostListener('window:resize')\n  onWindowResize(): void {\n    this.executePostDisplayActions = true;\n    this.center();\n  }\n\n  show(): void {\n    this.executePostDisplayActions = true;\n    this.visible = true;\n    setTimeout(() => {\n      this.modalRoot.nativeElement.focus();\n      if (this.scrollTopEnable) {\n        this.modalBody.nativeElement.scrollTop = 0;\n      }\n    }, 1);\n  }\n\n  hide(): void {\n    this.visible = false;\n    this.closeModal.emit(true);\n    this.focusLastModal();\n  }\n\n  center(): void {\n    let elementWidth = this.modalRoot.nativeElement.offsetWidth;\n    let elementHeight = this.modalRoot.nativeElement.offsetHeight;\n\n    if (elementWidth === 0 && elementHeight === 0) {\n      this.modalRoot.nativeElement.style.visibility = 'hidden';\n      this.modalRoot.nativeElement.style.display = 'block';\n      elementWidth = this.modalRoot.nativeElement.offsetWidth;\n      elementHeight = this.modalRoot.nativeElement.offsetHeight;\n      this.modalRoot.nativeElement.style.display = 'none';\n      this.modalRoot.nativeElement.style.visibility = 'visible';\n    }\n\n    const x = Math.max((window.innerWidth - elementWidth) / 2, 0);\n    const y = Math.max((window.innerHeight - elementHeight) / 2, 0);\n\n    this.modalRoot.nativeElement.style.left = x + 'px';\n    this.modalRoot.nativeElement.style.top = y + 'px';\n  }\n\n  initDrag(event: MouseEvent | TouchEvent): void {\n    if (event.target === this.closeIcon.nativeElement) {\n      return;\n    }\n    if (!this.maximized) {\n      this.dragEventTarget = event;\n    }\n  }\n\n  onResize(event: ResizableEvent): void {\n    if (event.direction === 'vertical') {\n      this.calcBodyHeight();\n    }\n  }\n\n  calcBodyHeight(): void {\n    const diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;\n    const contentHeight = this.modalRoot.nativeElement.offsetHeight - diffHeight;\n    this.modalBody.nativeElement.style.height = contentHeight + 'px';\n    this.modalBody.nativeElement.style.maxHeight = 'none';\n  }\n\n  getMaxModalIndex(): number {\n    return maxZIndex('.ui-modal');\n  }\n\n  focusLastModal(): void {\n    const modal = findAncestor(this.element.nativeElement.parentElement, '.ui-modal');\n    if (modal) {\n      modal.focus();\n    }\n  }\n\n  toggleMaximize(event): void {\n    if (this.maximized) {\n      this.revertMaximize();\n    } else {\n      this.maximize();\n    }\n    event.preventDefault();\n  }\n\n  maximize(): void {\n    this.preMaximizePageX = parseFloat(this.modalRoot.nativeElement.style.top);\n    this.preMaximizePageY = parseFloat(this.modalRoot.nativeElement.style.left);\n    this.preMaximizeRootWidth = this.modalRoot.nativeElement.offsetWidth;\n    this.preMaximizeRootHeight = this.modalRoot.nativeElement.offsetHeight;\n    this.preMaximizeBodyHeight = this.modalBody.nativeElement.offsetHeight;\n\n    this.modalRoot.nativeElement.style.top = '0px';\n    this.modalRoot.nativeElement.style.left = '0px';\n    this.modalRoot.nativeElement.style.width = '100vw';\n    this.modalRoot.nativeElement.style.height = '100vh';\n    const diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;\n    this.modalBody.nativeElement.style.height = 'calc(100vh - ' + diffHeight + 'px)';\n    this.modalBody.nativeElement.style.maxHeight = 'none';\n\n    this.maximized = true;\n  }\n\n  revertMaximize(): void {\n      this.modalRoot.nativeElement.style.top = this.preMaximizePageX + 'px';\n      this.modalRoot.nativeElement.style.left = this.preMaximizePageY + 'px';\n      this.modalRoot.nativeElement.style.width = this.preMaximizeRootWidth + 'px';\n      this.modalRoot.nativeElement.style.height = this.preMaximizeRootHeight + 'px';\n      this.modalBody.nativeElement.style.height = this.preMaximizeBodyHeight + 'px';\n\n      this.maximized = false;\n  }\n\n  moveOnTop(): void {\n    if (!this.backdrop) {\n      const maxModalIndex = this.getMaxModalIndex();\n      let zIndex = parseFloat(window.getComputedStyle(this.modalRoot.nativeElement).zIndex) || 0;\n      if (zIndex <= maxModalIndex) {\n        zIndex = maxModalIndex + 1;\n        this.modalRoot.nativeElement.style.zIndex = zIndex.toString();\n      }\n    }\n  }\n\n}\n","import {\n  Directive, ElementRef, HostListener, Input, Output, EventEmitter, OnDestroy, AfterViewInit\n} from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { isLeftButton, getEvent } from '../common/utils';\nimport { ResizableEvent } from './types';\n\n@Directive({\n  selector: '[appResizable]'\n})\nexport class ResizableDirective implements OnDestroy, AfterViewInit {\n\n  @Input() south: boolean;\n  @Input() east: boolean;\n  @Input() southEast: boolean;\n  @Input() ghost: boolean;\n  @Input() southWest: boolean;\n  @Input() west: boolean;\n  @Input() northWest: boolean;\n  @Input() north: boolean;\n  @Input() northEast: boolean;\n\n  @Output() resizeBegin: EventEmitter<any> = new EventEmitter();\n  @Output() resizing: EventEmitter<ResizableEvent> = new EventEmitter();\n  @Output() resizeEnd: EventEmitter<ResizableEvent> = new EventEmitter();\n\n  element: HTMLElement;\n  private subscription: Subscription;\n  private newWidth: number;\n  private newHeight: number;\n  private newLeft: number;\n  private newTop: number;\n  private resizingS: boolean; // south\n  private resizingE: boolean; // east\n  private resizingSE: boolean; // south-east\n  private resizingSW: boolean;\n  private resizingW: boolean;\n  private resizingNW: boolean;\n  private resizingN: boolean;\n  private resizingNE: boolean;\n\n  private minWidth: number;\n  private maxWidth: number;\n  private minHeight: number;\n  private maxHeight: number;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    if (this.south) {\n      this.createHandle('resize-handle-s');\n    }\n    if (this.east) {\n      this.createHandle('resize-handle-e');\n    }\n    if (this.southEast) {\n      this.createHandle('resize-handle-se');\n    }\n    if (this.southWest) {\n      this.createHandle('resize-handle-sw');\n    }\n    if (this.west) {\n      this.createHandle('resize-handle-w');\n    }\n    if (this.northWest) {\n      this.createHandle('resize-handle-nw');\n    }\n    if (this.north) {\n      this.createHandle('resize-handle-n');\n    }\n    if (this.northEast) {\n      this.createHandle('resize-handle-ne');\n    }\n    const computedStyle = window.getComputedStyle(this.element);\n    this.minWidth = parseFloat(computedStyle.minWidth);\n    this.maxWidth = parseFloat(computedStyle.maxWidth);\n    this.minHeight = parseFloat(computedStyle.minHeight);\n    this.maxHeight = parseFloat(computedStyle.maxHeight);\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubscription();\n  }\n\n  @HostListener('mousedown', ['$event'])\n  @HostListener('touchstart', ['$event'])\n  onMousedown(event: MouseEvent | TouchEvent): void {\n    if (!isLeftButton(event)) {\n      return;\n    }\n    const classList = ((event.target) as HTMLElement).classList;\n    const isSouth = classList.contains('resize-handle-s');\n    const isEast = classList.contains('resize-handle-e');\n    const isSouthEast = classList.contains('resize-handle-se');\n    const isSouthWest = classList.contains('resize-handle-sw');\n    const isWest = classList.contains('resize-handle-w');\n    const isNorthWest = classList.contains('resize-handle-nw');\n    const isNorth = classList.contains('resize-handle-n');\n    const isNorthEast = classList.contains('resize-handle-ne');\n\n    const evt = getEvent(event);\n    const width = this.element.clientWidth;\n    const height = this.element.clientHeight;\n    const left = this.element.offsetLeft;\n    const top = this.element.offsetTop;\n    const screenX = evt.screenX;\n    const screenY = evt.screenY;\n\n    const isTouchEvent = event.type.startsWith('touch');\n    const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n    const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n    if (isSouth || isEast || isSouthEast || isSouthWest || isWest || isNorthWest || isNorth || isNorthEast) {\n      this.initResize(event, isSouth, isEast, isSouthEast, isSouthWest, isWest, isNorthWest, isNorth, isNorthEast);\n\n      const mouseup = fromEvent(document, upEvent);\n      this.subscription = mouseup\n        .subscribe((ev: MouseEvent | TouchEvent) => this.onMouseup(ev));\n\n      const mouseMoveSub = fromEvent(document, moveEvent)\n        .pipe(takeUntil(mouseup))\n        .subscribe((e: MouseEvent | TouchEvent) => this.move(e, width, height, top, left, screenX, screenY));\n\n      this.subscription.add(mouseMoveSub);\n    }\n  }\n\n  move(event: MouseEvent | TouchEvent, width: number, height: number, top: number, left: number, screenX: number, screenY: number): void {\n    const evt = getEvent(event);\n    const movementX = evt.screenX - screenX;\n    const movementY = evt.screenY - screenY;\n\n    this.newWidth = width - (this.resizingSW || this.resizingW || this.resizingNW ? movementX : -movementX);\n    this.newHeight = height - (this.resizingNW || this.resizingN || this.resizingNE ? movementY : -movementY);\n    this.newLeft = left + movementX;\n    this.newTop = top + movementY;\n\n    this.resizeWidth(evt);\n    this.resizeHeight(evt);\n  }\n\n  onMouseup(event: MouseEvent | TouchEvent): void {\n    this.endResize(event);\n    this.destroySubscription();\n  }\n\n  private destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n  private createHandle(edgeClass: string): void {\n    const node = document.createElement('span');\n    node.className = edgeClass;\n    this.element.appendChild(node);\n  }\n\n  initResize(event: MouseEvent | TouchEvent,\n    isSouth: boolean,\n    isEast: boolean,\n    isSouthEast: boolean,\n    isSouthWest: boolean,\n    isWest: boolean,\n    isNorthWest: boolean,\n    isNorth: boolean,\n    isNorthEast: boolean) {\n    if (isSouth) {\n      this.resizingS = true;\n    }\n    if (isEast) {\n      this.resizingE = true;\n    }\n    if (isSouthEast) {\n      this.resizingSE = true;\n    }\n    if (isSouthWest) {\n      this.resizingSW = true;\n    }\n\n    if (isWest) {\n      this.resizingW = true;\n    }\n\n    if (isNorthWest) {\n      this.resizingNW = true;\n    }\n\n    if (isNorth) {\n      this.resizingN = true;\n    }\n\n    if (isNorthEast) {\n      this.resizingNE = true;\n    }\n    this.element.classList.add('resizing');\n    this.newWidth = this.element.clientWidth;\n    this.newHeight = this.element.clientHeight;\n    this.newLeft = this.element.offsetLeft;\n    this.newTop = this.element.offsetTop;\n    event.stopPropagation();\n    this.resizeBegin.emit();\n  }\n\n  endResize(event: MouseEvent | TouchEvent): void {\n    this.resizingS = false;\n    this.resizingE = false;\n    this.resizingSE = false;\n    this.resizingSW = false;\n    this.resizingW = false;\n    this.resizingNW = false;\n    this.resizingN = false;\n    this.resizingNE = false;\n    this.element.classList.remove('resizing');\n    this.resizeEnd.emit({ event: getEvent(event), width: this.newWidth, height: this.newHeight });\n  }\n\n  resizeWidth(event: MouseEvent | Touch): void {\n    const overMinWidth = !this.minWidth || this.newWidth >= this.minWidth;\n    const underMaxWidth = !this.maxWidth || this.newWidth <= this.maxWidth;\n\n    if (this.resizingSE || this.resizingE || this.resizingNE) {\n      if (overMinWidth && underMaxWidth) {\n        if (!this.ghost) {\n          this.element.style.width = `${this.newWidth}px`;\n        }\n      }\n    }\n    if (this.resizingSW || this.resizingW || this.resizingNW) {\n      if (overMinWidth && underMaxWidth) {\n        this.element.style.left = `${this.newLeft}px`;\n        this.element.style.width = `${this.newWidth}px`;\n      }\n    }\n    this.resizing.emit({ event, width: this.newWidth, height: this.newHeight, direction: 'horizontal' });\n\n  }\n\n  resizeHeight(event: MouseEvent | Touch): void {\n    const overMinHeight = !this.minHeight || this.newHeight >= this.minHeight;\n    const underMaxHeight = !this.maxHeight || this.newHeight <= this.maxHeight;\n    if (this.resizingSE || this.resizingS || this.resizingSW) {\n      if (overMinHeight && underMaxHeight) {\n        if (!this.ghost) {\n          this.element.style.height = `${this.newHeight}px`;\n        }\n      }\n    }\n\n    if (this.resizingNW || this.resizingN || this.resizingNE) {\n      if (overMinHeight && underMaxHeight) {\n        if (!this.ghost) {\n          this.element.style.top = `${this.newTop}px`;\n          this.element.style.height = `${this.newHeight}px`;\n        }\n      }\n    }\n    this.resizing.emit({ event, width: this.newWidth, height: this.newHeight, direction: 'vertical' });\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {ResizableDirective} from './resizable.directive';\n\n@NgModule({\n  declarations: [\n    ResizableDirective,\n  ],\n  exports: [\n    ResizableDirective,\n  ]\n})\nexport class ResizableModule {}\n","import {\n  Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges, NgZone\n} from '@angular/core';\nimport {isLeftButton, getEvent} from '../common/utils';\n\n@Directive({\n  selector: '[appDraggable]'\n})\nexport class DraggableDirective implements OnChanges, OnDestroy {\n\n  @Input() dragEventTarget: MouseEvent | TouchEvent;\n  @Input() dragX = true;\n  @Input() dragY = true;\n  @Input() inViewport: boolean;\n\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\n  @Output() dragMove: EventEmitter<any> = new EventEmitter();\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\n\n  isDragging: boolean;\n  lastPageX: number;\n  lastPageY: number;\n  private globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n  private elementWidth: number;\n  private elementHeight: number;\n  private vw: number;\n  private vh: number;\n\n  constructor(private element: ElementRef, private ngZone: NgZone) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragEventTarget && changes.dragEventTarget.currentValue) {\n      this.onMousedown(this.dragEventTarget);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.removeEventListener();\n  }\n\n  onMousedown(event: MouseEvent | TouchEvent): void {\n    if (!isLeftButton(event)) {\n      return;\n    }\n    if (this.dragX || this.dragY) {\n      const evt = getEvent(event);\n      this.initDrag(evt.pageX, evt.pageY);\n      this.addEventListeners(event);\n      this.dragStart.emit(event);\n    }\n  }\n\n  onMousemove(event: MouseEvent | TouchEvent): void {\n    const evt = getEvent(event);\n    this.onDrag(evt.pageX, evt.pageY);\n    this.dragMove.emit(event);\n  }\n\n  onMouseup(event: MouseEvent | TouchEvent): void {\n    this.endDrag();\n    this.removeEventListener();\n    this.dragEnd.emit(event);\n  }\n\n  addEventListeners(event: MouseEvent | TouchEvent): void {\n    const isTouchEvent = event.type.startsWith('touch');\n    const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n    const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n    this.globalListeners\n    .set(moveEvent, {\n      handler: this.onMousemove.bind(this),\n      options: false\n    })\n    .set(upEvent, {\n      handler: this.onMouseup.bind(this),\n      options: false\n    });\n\n    this.ngZone.runOutsideAngular(() => {\n      this.globalListeners.forEach((config, name) => {\n        window.document.addEventListener(name, config.handler, config.options);\n      });\n    });\n  }\n\n  removeEventListener(): void {\n    this.globalListeners.forEach((config, name) => {\n      window.document.removeEventListener(name, config.handler, config.options);\n    });\n  }\n\n  initDrag(pageX: number, pageY: number): void {\n      this.isDragging = true;\n      this.lastPageX = pageX;\n      this.lastPageY = pageY;\n      this.element.nativeElement.classList.add('dragging');\n\n      this.elementWidth = this.element.nativeElement.offsetWidth;\n      this.elementHeight = this.element.nativeElement.offsetHeight;\n      this.vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n      this.vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n  }\n\n  onDrag(pageX: number, pageY: number): void {\n    if (this.isDragging) {\n      const deltaX = pageX - this.lastPageX;\n      const deltaY = pageY - this.lastPageY;\n      const coords = this.element.nativeElement.getBoundingClientRect();\n      let leftPos = coords.left + deltaX;\n      let topPos = coords.top + deltaY;\n\n      const overWidth = !this.inViewport || leftPos >= 0 && (leftPos + this.elementWidth) <= this.vw;\n      const overHeight = !this.inViewport || topPos >= 0 && (topPos + this.elementHeight) <= this.vh;\n      if (overWidth) {\n        this.lastPageX = pageX;\n      }\n      if (overHeight) {\n        this.lastPageY = pageY;\n      }\n\n      if (this.inViewport) {\n        if (leftPos < 0) {\n          leftPos = 0;\n        }\n        if ((leftPos + this.elementWidth) > this.vw) {\n          leftPos = this.vw - this.elementWidth;\n        }\n        if (topPos < 0) {\n          topPos = 0;\n        }\n        if ((topPos + this.elementHeight) > this.vh) {\n          topPos = this.vh - this.elementHeight;\n        }\n      }\n      this.element.nativeElement.style.left = leftPos + 'px';\n      this.element.nativeElement.style.top = topPos + 'px';\n    }\n  }\n\n  endDrag(): void {\n    this.isDragging = false;\n    this.element.nativeElement.classList.remove('dragging');\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {DraggableDirective} from './draggable.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n  ],\n  exports: [\n    DraggableDirective,\n  ]\n})\nexport class DraggableModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ModalComponent} from './modal.component';\nimport {ResizableModule} from '../resizable/resizable-module';\nimport {DraggableModule} from '../draggable/draggable-module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DraggableModule,\n  ],\n  declarations: [\n    ModalComponent,\n  ],\n  exports: [\n    ModalComponent,\n  ]\n})\nexport class ModalModule {}\n"]}