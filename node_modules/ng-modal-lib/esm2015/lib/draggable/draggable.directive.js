import { Directive, ElementRef, Input, Output, EventEmitter, NgZone } from '@angular/core';
import { isLeftButton, getEvent } from '../common/utils';
import * as ɵngcc0 from '@angular/core';
export class DraggableDirective {
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.dragX = true;
        this.dragY = true;
        this.dragStart = new EventEmitter();
        this.dragMove = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this.globalListeners = new Map();
    }
    ngOnChanges(changes) {
        if (changes.dragEventTarget && changes.dragEventTarget.currentValue) {
            this.onMousedown(this.dragEventTarget);
        }
    }
    ngOnDestroy() {
        this.removeEventListener();
    }
    onMousedown(event) {
        if (!isLeftButton(event)) {
            return;
        }
        if (this.dragX || this.dragY) {
            const evt = getEvent(event);
            this.initDrag(evt.pageX, evt.pageY);
            this.addEventListeners(event);
            this.dragStart.emit(event);
        }
    }
    onMousemove(event) {
        const evt = getEvent(event);
        this.onDrag(evt.pageX, evt.pageY);
        this.dragMove.emit(event);
    }
    onMouseup(event) {
        this.endDrag();
        this.removeEventListener();
        this.dragEnd.emit(event);
    }
    addEventListeners(event) {
        const isTouchEvent = event.type.startsWith('touch');
        const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
        const upEvent = isTouchEvent ? 'touchend' : 'mouseup';
        this.globalListeners
            .set(moveEvent, {
            handler: this.onMousemove.bind(this),
            options: false
        })
            .set(upEvent, {
            handler: this.onMouseup.bind(this),
            options: false
        });
        this.ngZone.runOutsideAngular(() => {
            this.globalListeners.forEach((config, name) => {
                window.document.addEventListener(name, config.handler, config.options);
            });
        });
    }
    removeEventListener() {
        this.globalListeners.forEach((config, name) => {
            window.document.removeEventListener(name, config.handler, config.options);
        });
    }
    initDrag(pageX, pageY) {
        this.isDragging = true;
        this.lastPageX = pageX;
        this.lastPageY = pageY;
        this.element.nativeElement.classList.add('dragging');
        this.elementWidth = this.element.nativeElement.offsetWidth;
        this.elementHeight = this.element.nativeElement.offsetHeight;
        this.vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
        this.vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
    }
    onDrag(pageX, pageY) {
        if (this.isDragging) {
            const deltaX = pageX - this.lastPageX;
            const deltaY = pageY - this.lastPageY;
            const coords = this.element.nativeElement.getBoundingClientRect();
            let leftPos = coords.left + deltaX;
            let topPos = coords.top + deltaY;
            const overWidth = !this.inViewport || leftPos >= 0 && (leftPos + this.elementWidth) <= this.vw;
            const overHeight = !this.inViewport || topPos >= 0 && (topPos + this.elementHeight) <= this.vh;
            if (overWidth) {
                this.lastPageX = pageX;
            }
            if (overHeight) {
                this.lastPageY = pageY;
            }
            if (this.inViewport) {
                if (leftPos < 0) {
                    leftPos = 0;
                }
                if ((leftPos + this.elementWidth) > this.vw) {
                    leftPos = this.vw - this.elementWidth;
                }
                if (topPos < 0) {
                    topPos = 0;
                }
                if ((topPos + this.elementHeight) > this.vh) {
                    topPos = this.vh - this.elementHeight;
                }
            }
            this.element.nativeElement.style.left = leftPos + 'px';
            this.element.nativeElement.style.top = topPos + 'px';
        }
    }
    endDrag() {
        this.isDragging = false;
        this.element.nativeElement.classList.remove('dragging');
    }
}
DraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [["", "appDraggable", ""]], inputs: { dragX: "dragX", dragY: "dragY", dragEventTarget: "dragEventTarget", inViewport: "inViewport" }, outputs: { dragStart: "dragStart", dragMove: "dragMove", dragEnd: "dragEnd" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
DraggableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
DraggableDirective.propDecorators = {
    dragEventTarget: [{ type: Input }],
    dragX: [{ type: Input }],
    dragY: [{ type: Input }],
    inViewport: [{ type: Input }],
    dragStart: [{ type: Output }],
    dragMove: [{ type: Output }],
    dragEnd: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableDirective, [{
        type: Directive,
        args: [{
                selector: '[appDraggable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { dragX: [{
            type: Input
        }], dragY: [{
            type: Input
        }], dragStart: [{
            type: Output
        }], dragMove: [{
            type: Output
        }], dragEnd: [{
            type: Output
        }], dragEventTarget: [{
            type: Input
        }], inViewport: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,