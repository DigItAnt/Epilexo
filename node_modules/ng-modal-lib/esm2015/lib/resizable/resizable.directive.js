import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { isLeftButton, getEvent } from '../common/utils';
import * as ɵngcc0 from '@angular/core';
export class ResizableDirective {
    constructor(element) {
        this.resizeBegin = new EventEmitter();
        this.resizing = new EventEmitter();
        this.resizeEnd = new EventEmitter();
        this.element = element.nativeElement;
    }
    ngAfterViewInit() {
        if (this.south) {
            this.createHandle('resize-handle-s');
        }
        if (this.east) {
            this.createHandle('resize-handle-e');
        }
        if (this.southEast) {
            this.createHandle('resize-handle-se');
        }
        if (this.southWest) {
            this.createHandle('resize-handle-sw');
        }
        if (this.west) {
            this.createHandle('resize-handle-w');
        }
        if (this.northWest) {
            this.createHandle('resize-handle-nw');
        }
        if (this.north) {
            this.createHandle('resize-handle-n');
        }
        if (this.northEast) {
            this.createHandle('resize-handle-ne');
        }
        const computedStyle = window.getComputedStyle(this.element);
        this.minWidth = parseFloat(computedStyle.minWidth);
        this.maxWidth = parseFloat(computedStyle.maxWidth);
        this.minHeight = parseFloat(computedStyle.minHeight);
        this.maxHeight = parseFloat(computedStyle.maxHeight);
    }
    ngOnDestroy() {
        this.destroySubscription();
    }
    onMousedown(event) {
        if (!isLeftButton(event)) {
            return;
        }
        const classList = (event.target).classList;
        const isSouth = classList.contains('resize-handle-s');
        const isEast = classList.contains('resize-handle-e');
        const isSouthEast = classList.contains('resize-handle-se');
        const isSouthWest = classList.contains('resize-handle-sw');
        const isWest = classList.contains('resize-handle-w');
        const isNorthWest = classList.contains('resize-handle-nw');
        const isNorth = classList.contains('resize-handle-n');
        const isNorthEast = classList.contains('resize-handle-ne');
        const evt = getEvent(event);
        const width = this.element.clientWidth;
        const height = this.element.clientHeight;
        const left = this.element.offsetLeft;
        const top = this.element.offsetTop;
        const screenX = evt.screenX;
        const screenY = evt.screenY;
        const isTouchEvent = event.type.startsWith('touch');
        const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
        const upEvent = isTouchEvent ? 'touchend' : 'mouseup';
        if (isSouth || isEast || isSouthEast || isSouthWest || isWest || isNorthWest || isNorth || isNorthEast) {
            this.initResize(event, isSouth, isEast, isSouthEast, isSouthWest, isWest, isNorthWest, isNorth, isNorthEast);
            const mouseup = fromEvent(document, upEvent);
            this.subscription = mouseup
                .subscribe((ev) => this.onMouseup(ev));
            const mouseMoveSub = fromEvent(document, moveEvent)
                .pipe(takeUntil(mouseup))
                .subscribe((e) => this.move(e, width, height, top, left, screenX, screenY));
            this.subscription.add(mouseMoveSub);
        }
    }
    move(event, width, height, top, left, screenX, screenY) {
        const evt = getEvent(event);
        const movementX = evt.screenX - screenX;
        const movementY = evt.screenY - screenY;
        this.newWidth = width - (this.resizingSW || this.resizingW || this.resizingNW ? movementX : -movementX);
        this.newHeight = height - (this.resizingNW || this.resizingN || this.resizingNE ? movementY : -movementY);
        this.newLeft = left + movementX;
        this.newTop = top + movementY;
        this.resizeWidth(evt);
        this.resizeHeight(evt);
    }
    onMouseup(event) {
        this.endResize(event);
        this.destroySubscription();
    }
    destroySubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
        }
    }
    createHandle(edgeClass) {
        const node = document.createElement('span');
        node.className = edgeClass;
        this.element.appendChild(node);
    }
    initResize(event, isSouth, isEast, isSouthEast, isSouthWest, isWest, isNorthWest, isNorth, isNorthEast) {
        if (isSouth) {
            this.resizingS = true;
        }
        if (isEast) {
            this.resizingE = true;
        }
        if (isSouthEast) {
            this.resizingSE = true;
        }
        if (isSouthWest) {
            this.resizingSW = true;
        }
        if (isWest) {
            this.resizingW = true;
        }
        if (isNorthWest) {
            this.resizingNW = true;
        }
        if (isNorth) {
            this.resizingN = true;
        }
        if (isNorthEast) {
            this.resizingNE = true;
        }
        this.element.classList.add('resizing');
        this.newWidth = this.element.clientWidth;
        this.newHeight = this.element.clientHeight;
        this.newLeft = this.element.offsetLeft;
        this.newTop = this.element.offsetTop;
        event.stopPropagation();
        this.resizeBegin.emit();
    }
    endResize(event) {
        this.resizingS = false;
        this.resizingE = false;
        this.resizingSE = false;
        this.resizingSW = false;
        this.resizingW = false;
        this.resizingNW = false;
        this.resizingN = false;
        this.resizingNE = false;
        this.element.classList.remove('resizing');
        this.resizeEnd.emit({ event: getEvent(event), width: this.newWidth, height: this.newHeight });
    }
    resizeWidth(event) {
        const overMinWidth = !this.minWidth || this.newWidth >= this.minWidth;
        const underMaxWidth = !this.maxWidth || this.newWidth <= this.maxWidth;
        if (this.resizingSE || this.resizingE || this.resizingNE) {
            if (overMinWidth && underMaxWidth) {
                if (!this.ghost) {
                    this.element.style.width = `${this.newWidth}px`;
                }
            }
        }
        if (this.resizingSW || this.resizingW || this.resizingNW) {
            if (overMinWidth && underMaxWidth) {
                this.element.style.left = `${this.newLeft}px`;
                this.element.style.width = `${this.newWidth}px`;
            }
        }
        this.resizing.emit({ event, width: this.newWidth, height: this.newHeight, direction: 'horizontal' });
    }
    resizeHeight(event) {
        const overMinHeight = !this.minHeight || this.newHeight >= this.minHeight;
        const underMaxHeight = !this.maxHeight || this.newHeight <= this.maxHeight;
        if (this.resizingSE || this.resizingS || this.resizingSW) {
            if (overMinHeight && underMaxHeight) {
                if (!this.ghost) {
                    this.element.style.height = `${this.newHeight}px`;
                }
            }
        }
        if (this.resizingNW || this.resizingN || this.resizingNE) {
            if (overMinHeight && underMaxHeight) {
                if (!this.ghost) {
                    this.element.style.top = `${this.newTop}px`;
                    this.element.style.height = `${this.newHeight}px`;
                }
            }
        }
        this.resizing.emit({ event, width: this.newWidth, height: this.newHeight, direction: 'vertical' });
    }
}
ResizableDirective.ɵfac = function ResizableDirective_Factory(t) { return new (t || ResizableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ResizableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizableDirective, selectors: [["", "appResizable", ""]], hostBindings: function ResizableDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function ResizableDirective_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); })("touchstart", function ResizableDirective_touchstart_HostBindingHandler($event) { return ctx.onMousedown($event); });
    } }, inputs: { south: "south", east: "east", southEast: "southEast", ghost: "ghost", southWest: "southWest", west: "west", northWest: "northWest", north: "north", northEast: "northEast" }, outputs: { resizeBegin: "resizeBegin", resizing: "resizing", resizeEnd: "resizeEnd" } });
ResizableDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizableDirective.propDecorators = {
    south: [{ type: Input }],
    east: [{ type: Input }],
    southEast: [{ type: Input }],
    ghost: [{ type: Input }],
    southWest: [{ type: Input }],
    west: [{ type: Input }],
    northWest: [{ type: Input }],
    north: [{ type: Input }],
    northEast: [{ type: Input }],
    resizeBegin: [{ type: Output }],
    resizing: [{ type: Output }],
    resizeEnd: [{ type: Output }],
    onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizableDirective, [{
        type: Directive,
        args: [{
                selector: '[appResizable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resizeBegin: [{
            type: Output
        }], resizing: [{
            type: Output
        }], resizeEnd: [{
            type: Output
        }], onMousedown: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }, {
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], south: [{
            type: Input
        }], east: [{
            type: Input
        }], southEast: [{
            type: Input
        }], ghost: [{
            type: Input
        }], southWest: [{
            type: Input
        }], west: [{
            type: Input
        }], northWest: [{
            type: Input
        }], north: [{
            type: Input
        }], northEast: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,